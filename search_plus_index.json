{"./":{"url":"./","title":"我的数据库管理手册","keywords":"","body":"简介 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"mysql/设计规范/130_规范要求精简版.html":{"url":"mysql/设计规范/130_规范要求精简版.html","title":"规范要求精简版","keywords":"","body":"规范要求精简版 以下规范请各位供应链系统部的同事，在规范正式发布生效后，在新项目开发过程中严格执行。 强制规范 所有表必须使用自增的 ID 作为主键，且不用于与其他表进行关联使用。例如主表为： id contract_no contract_name 1 C1001 合同1号 2 C1002 合同2号 3 C1003 合同3号 其中 id 是主键，contract_no 是唯一索引，那么明细表不应该定义为： id contract_id 1 1 2 1 3 1 4 2 5 3 正确的明细表应该定义为： id contract_no 1 C1001 2 C1001 3 C1001 4 C1002 5 C1003 基础表和单据表必须包含业务唯一索引确保业务数据的唯一性。 不使用用户录入信息做为业务唯一索引，如物料编码等。 字段类型只可以在 tinyint、smallint、int、bigint、decimal、char、varchar、date、datetime 中选择。 所有的数据库对象以小写命名，单词间用下划线分割，不得使用汉字、特殊符号。 所有对象必须包含 comment 注释。 不允许建立外键。 建议规范 关联字段名称类型尽量保持一致，且不允许为空。 字段类型长度需根据业务考虑清楚，尽量遵循取小不取大原则。 字段建议给出默认值，且不允许为空。 简单命名用英文单词，复杂命名尽量采用英文缩写，禁止使用汉字拼音命名。 命名避免使用数据库关键字、保留字，如（desc、user、size、level、order、group等） 表名的长度尽量控制在 30 个字符以内。 唯一索引命名为 \"uk_\"+表名+字段名，普通索引命名为 \"idx_\"+表名+字段名。 开发要求 数据字典统一在 petrel 平台进行配置。 编码规则统一在 petrel 平台进行配置。 表关联不能超过 3 个，超过 3 个的需要组织评审。 单据表单号统一命名为 bill_no，方便基类统一处理，作为其他业务表的关联字段时，可以根据业务定义为 xxx_no，类型保持一致。 表结构设计时请参考表设计模版，通用字段一定都要有。 表名设计要求 表名设计要求需在开发评审时确定，在定义表结构时严格遵循。以下清单会及时更新，不断完善。 表名前缀设计 系统 前缀 示例 UC sys_ sys_user SMD bm_ bm_verder BMS bms_ 基础表：bms_contract 单据表：bms_bl_receive（这里注意单据表都要增加 bl 进行标识） GTP gtp_ gtp_xxx 表名中缀设计 业务类型 中缀 示例 出库 so 入库 si 收货 rec 调拨 allot 盘点 ck 发运 ship 退货 ret 委外 sub 质检 qc 采购 pur 定额 qu 非定额 nqu 客户订单 co 采购订单 po 生产工单 mo 生产计划单 mop 表名后缀设计 业务类型 后缀 示例 单据明细 _dtl bl_co、bl_co_dtl 申请单 _req bl_co_req、bl_co_req_dtl 通知单 _nt bl_co_nt、bl_co_nt_dtl 审批单 _adt bl_co_adt、bl_co_adt_dtl 字段名设计要求 关键字段命名 业务类型 后缀 示例 推荐数据类型定义 xx编号 no material_no varchar(20) xx名称 name material_name varchar(60) xx日期 date effect_date date xx时间 time start_time datetime xx金额 value sale_value decimal(12,2) xx数量 qty sale_qty decimal(12,3) xx成本 cost pur_cost decimal(16,6) xx价格 price pur_price decimal(16,6) xx状态 status pur_status tinyint(4) Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-06 23:37:06 "},"mysql/设计规范/150_表设计模版.html":{"url":"mysql/设计规范/150_表设计模版.html","title":"表设计模版","keywords":"","body":"表设计模版 基础资料表 -- DROP TABLE IF EXISTS `bm_size`; CREATE TABLE `bm_size` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '行ID(主键)', `size_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '尺码编号', `size_name` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '尺码名称', `order_no` smallint(6) DEFAULT NULL COMMENT '排列序号', `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态(0=未生效 1=启用 2=作废)', ... ... ... `creator` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '建档人', `create_time` datetime NOT NULL COMMENT '建档时间', `modifier` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT '修改人', `modify_time` datetime DEFAULT NULL COMMENT '修改时间', `remarks` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `del_tag` varchar(2) COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT 'otter 数据同步标志(0=同步 1=不同步)', `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_bm_size_size_no` (`size_no`) ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='尺码信息表'; 单据表 -- DROP TABLE IF EXISTS `bl_po`; CREATE TABLE `bl_po` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '行ID(主键)', `bill_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '单据编号', `status` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '单据状态(取数据字典 xxx)', ... ... ... `creator` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '建档人', `create_time` datetime NOT NULL COMMENT '建档时间', `modifier` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT '修改人', `modify_time` datetime DEFAULT NULL COMMENT '修改时间', `auditor` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT '审核人', `audit_time` datetime DEFAULT NULL COMMENT '审核时间', `remarks` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `del_tag` varchar(2) COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT 'otter 数据同步标志(0=同步 1=不同步)', `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_bl_po_bill_no` (`bill_no`) ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='采购订单主表'; -- DROP TABLE IF EXISTS `bl_po_dtl`; CREATE TABLE `bl_po_dtl` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '行ID(主键)', `bill_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '单据编号', `material_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '物料编号', `size_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '尺码', `size_qty` int(11) NOT NULL COMMENT '尺码数量', `finish_qty` int(11) DEFAULT NULL COMMENT '制造数(完工数)', ... ... ... `del_tag` varchar(2) COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT 'otter 数据同步标志(0=同步 1=不同步)', `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_bl_po_dtl_bno_mno_sno` (`bill_no`,`material_no`,`size_no`), ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='采购订单明细表'; -- 唯一索引有多个字段组成的，取每个字段的第一位+后两位，如：uk_bl_po_dtl_bno_mno_sno 无限分级表 -- DROP TABLE IF EXISTS `bm_category`; CREATE TABLE `bm_category` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '行ID(主键)', `category_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '类别编号', `category_name` varchar(30) COLLATE utf8_bin NOT NULL COMMENT '类别名称', `parent_category_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '上级类别编号', `level_no` int(11) NOT NULL COMMENT '类别级别', `search_code` varchar(200) COLLATE utf8_bin NOT NULL COMMENT '类别路径', `order_no` smallint(6) DEFAULT NULL COMMENT '排列序号', `status` smallint(6) NOT NULL DEFAULT '1' COMMENT '状态(0=未生效 1=启用 2=作废)', ... ... ... `creator` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '建档人', `create_time` datetime NOT NULL COMMENT '建档时间', `modifier` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT '修改人', `modify_time` datetime DEFAULT NULL COMMENT '修改时间', `remarks` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `del_tag` varchar(2) COLLATE utf8_bin NOT NULL DEFAULT '0' COMMENT 'otter 数据同步标志(0=同步 1=不同步)', `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间', PRIMARY KEY (`id`), UNIQUE KEY `uk_bm_category_category_no` (`category_no`) ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='类别信息表'; 注意事项 AUTO_INCREMENT 必须改成 1。 如果是 BLF1 项目，请使用 sync_data_sign 字段替换 del_tag 字段作为 otter 数据同步标志： `sync_data_sign` tinyint(4) NOT NULL DEFAULT '1' COMMENT '数据同步标志(1=同步 0=不同步)', Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-06 10:23:34 "},"mysql/实用技巧/710_数据行列转换.html":{"url":"mysql/实用技巧/710_数据行列转换.html","title":"数据行列转换","keywords":"","body":"数据行列转换 行转列 -- 创建测试数据表及数据 create table `option` ( `category_id` int(10) unsigned not null comment '分类id', `name` varchar(20) not null comment '名称', key `category_id` (`category_id`) ) engine=innodb default charset=utf8; insert into `option` (`category_id`, `name`) values (1, '大'), (1, '中'), (1, '小'), (2, '奔驰'), (2, '宝马'), (3, '2015'), (3, '2016'), (3, '2017'), (3, '2018'), (4, '1m'), (4, '2m'); select * from `option`; +-------------+--------+ | category_id | name | +-------------+--------+ | 1 | 大 | | 1 | 中 | | 1 | 小 | | 2 | 奔驰 | | 2 | 宝马 | | 3 | 2015 | | 3 | 2016 | | 3 | 2017 | | 3 | 2018 | | 4 | 1m | | 4 | 2m | +-------------+--------+ -- 行转列 select category_id,group_concat(name) as name from `option` group by category_id order by category_id; +-------------+---------------------+ | category_id | name | +-------------+---------------------+ | 1 | 大,中,小 | | 2 | 奔驰,宝马 | | 3 | 2015,2016,2017,2018 | | 4 | 1m,2m | +-------------+---------------------+ 列转行 -- 创建测试数据表及数据 create table `option2` ( `category_id` int(10) unsigned not null comment '分类id', `name` varchar(100) not null comment '名称集合' ) engine=innodb default charset=utf8; insert into `option2` (`category_id`, `name`) values (1, '大,中,小 '), (2, '奔驰,宝马'), (3, '2015,2016,2017,2018'), (4, '1m,2m'); select * from `option2`; +-------------+---------------------+ | category_id | name | +-------------+---------------------+ | 1 | 大,中,小 | | 2 | 奔驰,宝马 | | 3 | 2015,2016,2017,2018 | | 4 | 1m,2m | +-------------+---------------------+ -- 列转行比行转列复杂，对于列内容是用分隔符分隔的数据，我们可以使用 substring_index() 函数进行分割输出，并结合笛卡尔积来实现循环。 select a.category_id,substring_index(substring_index(a.name,',',b.category_id),',',-1) as name from `option2` as a join `option2` as b on b.category_id Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"mysql/MySQL运维记录/850_千万级大表转化为按月分区表.html":{"url":"mysql/MySQL运维记录/850_千万级大表转化为按月分区表.html","title":"千万级大表分区表转化","keywords":"","body":"千万级大表分区表转化 背景 最新接到一个需求，说某业务报表最近查询非常慢，需要进行调优。通过 explain 语句发现这个报表关联了一张库存流水表，而这张表的数据目前已经接近了 6000W，经过沟通，用户查询的需求其实只是在某个时间段内，而这个时间也有建索引，但是由于查询的数据量还是很大，因此这个索引无法发挥作用。其实对于这种表，有经验的开发一开始就应该建成分区表了，这样可以大大减小时间范围内的搜索区间，从而提升查询的效率。不过，既然一开始没有长远的考虑，那么目前只能进行改造了，当然肯定会麻烦不少，考验 DBA 智慧的时候到了，～～。 表结构分析 在改造之前，先分析一下表结构，由于已经在线上使用，因此以生产环境的表结构为准： CREATE TABLE `stk_book` ( `line_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '行id(主键)', `division_no` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '事业部编号', `store_no` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '仓库编号', `bill_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '单据编号', `bill_type_no` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '单据类型', ...... `cell_no` varchar(20) COLLATE utf8_bin NOT NULL COMMENT '储位编号', `book_qty` decimal(12,3) NOT NULL DEFAULT '0.000' COMMENT '交易数量', `stk_qty` decimal(12,3) NOT NULL DEFAULT '0.000' COMMENT '库存数量', `audit_time` datetime NOT NULL COMMENT '审核时间(单据)', `book_time` datetime NOT NULL COMMENT '记账时间', `remarks` varchar(600) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间', `owner_no` varchar(10) COLLATE utf8_bin NOT NULL DEFAULT 'D01' COMMENT '货主编码', PRIMARY KEY (`line_id`), KEY `idx_stk_book_update_time` (`update_time`), KEY `i_stk_book1` (`store_no`,`material_no`,`size_no`,`batch_no`,`cell_no`), KEY `i_stk_book2` (`bill_no`,`bill_type_no`), KEY `i_stk_book3` (`ref_bill_type_no`) USING BTREE, KEY `i_stk_book4` (`book_time`,`store_no`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=9040083339 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='库存交易表' 然后，与开发主管沟通后，确定可以使用 book_time 这个字段作为分区条件，每个月的数据大约是 400W 左右，因此比较适合按月建立分区。 对于分区范围的选择有个大致的判断标准：分区后每个分区的数据量应该控制在 800W 以内。 表结构改造 确定了分区字段、分区范围，就可以着手将这个大表进行分区改造了。 由于我们的 DB 使用了 mycat 和 otter，因此改造时要一起考虑实施的方便性、可行性。 -- 1、创建一个跟 stk_book 一样的新表，表结构一致，且不含数据 /*#mycat:sql=select 1 from node_biz*/ create table stk_book_partition like stk_book; -- 2、调整新表主键，因为分区表要求分区字段必须是主键或者是主键的一部分。 /*#mycat:sql=select 1 from node_biz*/ alter table stk_book_partition drop column line_id; /*#mycat:sql=select 1 from node_biz*/ alter table stk_book_partition add column line_id bigint(20) not null comment '行id(主键)' first; /*#mycat:sql=select 1 from node_biz*/ alter table stk_book_partition add primary key(line_id,book_time); /*#mycat:sql=select 1 from node_biz*/ alter table stk_book_partition modify column line_id bigint(20) not null auto_increment comment '行id(主键)'; -- 3、自动生成按月分区脚本，经查此表是 2015 年 10 月上线的，默认先扩展分区到 2022 年底 -- 暂不考虑自动扩展分区，感觉用存储过程+定时器的方式扩展分区在 mycat 环境下会比较麻烦 -- 因此后续再考虑使用 python 来实现自动扩展分区功能 select concat('partition p_',p_month,' values less than (''',p_less,'''),') script from ( select date_format(@x,'%Y%m') p_month,@x:=date_add(@x,INTERVAL 1 month) p_less from information_schema.columns a INNER JOIN (select @x:=date('2015-10-01') date) b ) a where p_month 数据处理 在有了 stk_book_partition 表以后，我们需要将原表的数据导入到这个新表当中。 在这一步，需要考虑的一个问题是，这个表的数据量很大，如何在写入 stk_book_partition 时不记录日志，防止产生大量无用的日志，且写入速度缓慢。 mysql 针对这种场景已经给出了解决方案，就是配置 sql_log_bin 参数，先看看这个参数的作用： sql_log_bin 是一个动态变量，修改该变量时，可以只对当前会话生效（Session），也可以是全局的（Global），当全局修改这个变量时，只会对新的会话生效（这意味着对当前会话也不会生效），因此一般全局修改了这个变量后，都要把原来的所有连接 kill 掉。 set sql_log_bin=0 的作用和目的：禁止将自己的语句记入二进制日志文件 binlog 中，当然也就不会更新到备库中；因此在操作完成后，别忘记了执行 set sql_log_bin=1; 因此，我们可以利用这个特性，来进行此次大批量数据的处理。但是为了安全起见，这个操作，不到 mycat 环境中执行，需要直连到此表相关的物理库进行处理，且主从库都要执行，这一点非常重要，相对这一步会比较耗时。 set sql_log_bin=0; insert into stk_book_partition select * from stk_book; set sql_log_bin=1; 交换表名 将 2 个表的表名进行交换，即可完成分区表的改造。 /*#mycat:sql=select 1 from node_biz*/ alter table stk_book rename stk_book_old; /*#mycat:sql=select 1 from node_biz*/ alter table stk_book_partition rename stk_book; 数据检查 在改造完成后，需要对数据进行核查，由于我们使用了 mycat，因此可以在 mycat 中更方便地进行数据核查。 首先，在 master 检查数据总条数： /*#mycat:sql=select 1 from node_biz*/ select count(*) from stk_book; /*#mycat:sql=select 1 from node_biz*/ select count(*) from stk_book_old; 然后，在 slave 检查数据总条数： /*#mycat:balance=select 1 from node_biz*/ select count(*) from stk_book; /*#mycat:balance=select 1 from node_biz*/ select count(*) from stk_book_old; 同步检查 由于表名进行了交换，担心系统内部的 table id 变化会引起数据同步问题，因此需要做一些同步测试。 简单地修改一行数据，然后查看所有从库和目标库，均正确被修改，因此判断以上操作不影响主从复制和 otter 同步。 删除无用表 以上检查都确保无误后，清理掉无用的 stk_book_old 表。 /*#mycat:sql=select 1 from node_biz*/ drop table stk_book_old; 至此，此千万级大表转换为按月分区表操作完成。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"mysql/980_MySQL问题记录.html":{"url":"mysql/980_MySQL问题记录.html","title":"MySQL问题记录","keywords":"","body":"MySQL问题记录 主从复制问题 Reading event from the relay log 使用 show SLAVE status 排查，发现下面现象： slave 延时 Seconds_Behind_Master 不断增加 复制位点无法移动，Relay_Log_File 停留在 relay-bin.011436，Relay_Log_Pos 停留在 252587725 复制状态中没有发现 error 信息，当前状态信息显示：Reading event from the relay log 重启 salve 服务器，问题依旧 本想重启 master 服务器看看，但感觉会有风险(远程中，屋外正遭遇超强台风——山竹)，因此没有这么做 发现 slave CPU 一直处于高占比状态 查了一下资料，怀疑是有大表没有索引，但是发生了大批量的删除操作引起 slave hang 住了。 于是在 slave 进行以下排查： $ mysqlbinlog relay-bin.011436 --start-position=528712521 --stop-datetime=\"2018-09-14 08:09:53\" --base64-output=decode-rows -v > /data/data/slave.sql $ more /data/data/slave.sql /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/; /*!40019 SET @@session.max_insert_delayed_threads=0*/; /*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/; DELIMITER /*!*/; # at 528712521 #180914 7:55:34 server id 229 end_log_pos 528712438 CRC32 0x6cbd5bb0 Query thread_id=1295527 exec_time=5 error_code=0 SET TIMESTAMP=1536882934/*!*/; SET @@session.pseudo_thread_id=1295527/*!*/; SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/; SET @@session.sql_mode=1075838976/*!*/; SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/; /*!\\C utf8 *//*!*/; SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=83/*!*/; SET @@session.lc_time_names=0/*!*/; SET @@session.collation_database=DEFAULT/*!*/; BEGIN /*!*/; # at 528712601 #180914 7:55:34 server id 229 end_log_pos 528712641 CRC32 0xf1cb3244 Table_map: `db_cost_test`.`rpt_zg_dtl` mapped to number 110350 # at 528712804 #180914 7:55:34 server id 229 end_log_pos 528720585 CRC32 0xbf305d97 Delete_rows: table id 110350 # at 528720748 #180914 7:55:34 server id 229 end_log_pos 528728656 CRC32 0x9c99fbea Delete_rows: table id 110350 # at 528728819 #180914 7:55:34 server id 229 end_log_pos 528736727 CRC32 0xc5ff2a71 Delete_rows: table id 110350 # at 528736890 #180914 7:55:34 server id 229 end_log_pos 528744793 CRC32 0x65a076b7 Delete_rows: table id 110350 # at 528744956 #180914 7:55:34 server id 229 end_log_pos 528752847 CRC32 0xe4bcc38b Delete_rows: table id 110350 # at 528753010 #180914 7:55:34 server id 229 end_log_pos 528760906 CRC32 0x8b252d64 Delete_rows: table id 110350 # at 528761069 #180914 7:55:34 server id 229 end_log_pos 528768975 CRC32 0xba958c08 Delete_rows: table id 110350 # at 528769138 #180914 7:55:34 server id 229 end_log_pos 528777021 CRC32 0x28034329 Delete_rows: table id 110350 # at 528777184 #180914 7:55:34 server id 229 end_log_pos 528785092 CRC32 0xe0aa98f1 Delete_rows: table id 110350 果不其然，发现了大量的 Delete_rows 信息，检查 db_cost_test.rpt_zg_dtl 的表结构，发现此表连主键都没有建，而此表的数量已经接近 400W。 找到原因了，于是，尝试在 slave 加索引： alter table db_cost_test.rpt_zg_dtl modify COLUMN line_id bigint(20) NOT NULL AUTO_INCREMENT PRIMARY key COMMENT '行id(主键)'; 发现加不上，因为这个表 line_id 有很多重复的数据。 干脆先不要同步这个表了，需要在配置文件中指定： # 关闭数据库服务器 $ mysqladmin shutdown # 修改配置文件 /etc/my.cnf，添加 replicate-ignore-table=db_cost_test.rpt_zg_dtl，忽略该表的主从复制 replicate-ignore-table=db_cost_test.rpt_zg_dtl # 启动数据库服务器 $ service mysql start 然后，slave 开启复制： start slave; 这时再观察 show SLAVE status\\G ，发现 Seconds_Behind_Master 开始不断减少了，说明 db_cost_test.rpt_zg_dtl 的复制被跳过了。 等待一段时间，直到 Seconds_Behind_Master 变成了0，说明主从复制恢复正常了。 然后再来处理这个有问题的表，在 master 调整表结构，并设置主键： alter table db_cost_test.rpt_zg_dtl DROP column line_id; alter table db_cost_test.rpt_zg_dtl add COLUMN line_id bigint(20) NOT NULL AUTO_INCREMENT PRIMARY key COMMENT '行id(主键)' first; 再将这个表导入到 slave 库，这时，master 库与 slave 库又保持一致了。 最后，将配置文件临时添加的 replicate-ignore-table=db_cost_test.rpt_zg_dtl 规则去掉，然后再重启一下 slave 并重新开启同步，一切又步入正轨了。 至此，问题解决。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/110_Redis简介.html":{"url":"redis/110_Redis简介.html","title":"Redis简介","keywords":"","body":"Redis简介 Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. Redis 是一个开源(BSD许可)的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如：字符串(strings)，散列(hashes)，列表(lists)，集合(sets)，有序集合(sorted sets)与范围查询，bitmaps，hyperloglogs和地理空间(geospatial)索引半径查询。Redis 内置了复制(replication)，LUA脚本(Lua scripting)，LRU驱动事件(LRU eviction)，事务(transactions)和不同级别的磁盘持久化(persistence)，并通过 Redis哨兵(Sentinel)和自动分区(Cluster)提供高可用性(high availability)。 Redis 是一种基于键值对(key-value)数据库，其中 value 可以为 string、hash、list、set、zset 等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。 流水线: Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。 官方资源 Redis官网 Redis中文官网 Redis官方下载地址 Redis官方在线试用教程 优质学习资源 小不点啊——Redis系列 特性 速度快，数据放在内存中，官方给出的读写性能10万/S，与机器性能也有关 数据放内存中是速度快的主要原因 C语言实现，与操作系统距离近 使用了单线程架构，预防多线程可能产生的竞争问题 键值对的数据结构服务器 丰富的功能：键过期，发布订阅，事务，流水线..... 简单稳定：单线程 持久化：发生断电或机器故障，数据可能会丢失，持久化到硬盘 主从复制：实现多个相同数据的redis副本 高可用和分布式：哨兵机制实现高可用，保证redis节点故障发现和自动转移 客户端语言多：java php python c c++ nodejs等 应用场景 缓存：合理使用缓存加快数据访问速度，降低后端数据源压力 排行榜：按照热度排名，按照发布时间排行，主要用到列表和有序集合 计数器应用：视频网站播放数，网站浏览数，使用redis计数 社交网络：赞、踩、粉丝、下拉刷新 消息队列：发布和订阅 版本说明 版本号第二位为奇数，为非稳定版本（2.7、2.9、3.1） 第二为偶数，为稳定版本（2.6、2.8、3.0） 当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/120_Redis单机部署.html":{"url":"redis/120_Redis单机部署.html","title":"Redis单机部署","keywords":"","body":"Redis单机部署 以下为本人在 Centos7.5 下的安装 redis-4.0.11 过程，实验机器 IP 为 172.20.32.125。 官方安装步骤 \b官方安装说明 # 这里视安全需求决定，我的机器默认配置的是关闭安全控制 # 关闭防火墙 # 关闭 Selinux $ cd /tmp/ # 下载 Redis $ wget http://download.redis.io/releases/redis-4.0.11.tar.gz # 解包 $ tar zxvf redis-4.0.11.tar.gz $ cd /tmp/redis-4.0.11 # 编译 Redis $ make # 运行 Redis $ /tmp/redis-4.0.11/src/redis-server # 使用客户端验证 $ /tmp/redis-4.0.11/src/redis-cli 127.0.0.1:6379> set foo bar OK 127.0.0.1:6379> get foo \"bar\" 127.0.0.1:6379> exit 使用上面的方式会启动一个本地 Redis 服务器，但仅限于本机访问，而且进程不是守护的。 显然还不符合使用的需求，但是可以看出 Redis 是编译完成后就能直接使用的，下面在此基础上再进行改造。 配置 Redis 服务 # 配置 Redis 并设置开机启动 $ sh /tmp/redis-4.0.11/utils/install_server.sh 一路回车，默认配置结果如下： Welcome to the redis service installer This script will help you easily set up a running redis server Please select the redis port for this instance: [6379] Selecting default: 6379 Please select the redis config file name [/etc/redis/6379.conf] Selected default - /etc/redis/6379.conf Please select the redis log file name [/var/log/redis_6379.log] Selected default - /var/log/redis_6379.log Please select the data directory for this instance [/var/lib/redis/6379] Selected default - /var/lib/redis/6379 Please select the redis executable path [/usr/local/bin/redis-server] Selected config: Port : 6379 Config file : /etc/redis/6379.conf Log file : /var/log/redis_6379.log Data dir : /var/lib/redis/6379 Executable : /usr/local/bin/redis-server Cli Executable : /usr/local/bin/redis-cli Is this ok? Then press ENTER to go on or Ctrl-C to abort. Copied /tmp/6379.conf => /etc/init.d/redis_6379 Installing service... Successfully added to chkconfig! Successfully added to runlevels 345! Starting Redis server... Installation successful! 此时，安装完成，注意一下默认的配置即可。 Redis 服务默认还没有启动，可以启动一下： $ /etc/init.d/redis_6379 start $ /etc/init.d/redis_6379 status # 查看 Redis 开机启动配置 $ chkconfig | grep redis 做一个简单的测试 $ ps -ef | grep redis root 30248 1 0 17:25 ? 00:00:00 /usr/local/bin/redis-server 127.0.0.1:6379 root 30333 2267 0 17:25 pts/0 00:00:00 grep --color=auto redis $ redis-cli 127.0.0.1:6379> set name yanglei OK 127.0.0.1:6379> get name \"yanglei\" 127.0.0.1:6379> exit 进程、操作都 OK，说明安装成功。 此时发现 Redis 已安装成服务的模式，而且设置成了开机启动。 但此时使用客户端工具，如：redis-desktop-manager 来进行远程连接，会发现仍然连不上。 原因是：Redis 默认只允许本地访问，要使 Redis 可以远程访问需要修改配置文件。 开启远程访问 # 关闭 Redis 服务 $ /etc/init.d/redis_6379 stop # 修改绑定的主机 IP $ sed -i 's/bind 127.0.0.1/bind 127.0.0.1 172.20.32.125/g' /etc/redis/6379.conf # 关闭保护模式 $ sed -i 's/protected-mode yes/protected-mode no/g' /etc/redis/6379.conf $ /etc/init.d/redis_6379 start 再次使用客户端工具连接，发现可以进行远程访问了。 参考资料 Redis系列一：Reids的单机版安装 CentOS7 下安装 Redis CentOS7 下安装 Redis-4.0.6 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/130_Redis配置文件.html":{"url":"redis/130_Redis配置文件.html","title":"Redis配置文件","keywords":"","body":"Redis配置文件 作为数据库管理人员，深知数据库配置文件是很重要的，需要理解配置文件中的常用选项才能游刃有余。 Redis 的配置文件还是挺长的，因此有必要整理一份常用的中文配置，使用起来更得心应手。 具体配置可以参考： Redis配置文件详解 Redis的配置文件redis.conf全面解析 Redis 4.0.6 配置文件翻译 下面基于目前最新的 redis-4.0.11 版本，梳理一下配置文件。 中文版配置文件 ## 由 install_server.sh 脚本自动生成 ## # Redis 配置文件示例 # # 注意，为了读取配置文件，Redis 必须使用配置文件路径作为第一个参数 # 例如： # ./redis-server /path/to/redis.conf # 当你需要为某个配置项指定内存大小的时候，必须要带上单位， # 通常的格式就是 1k 5GB 4M 等等: # # 1k => 1000 bytes # 1kb => 1024 bytes # 1m => 1000000 bytes # 1mb => 1024*1024 bytes # 1g => 1000000000 bytes # 1gb => 1024*1024*1024 bytes # # 单位是不区分大小写的，因此 1GB 1Gb 1gB 都是相同的。 ################################## INCLUDES ################################### # 假如说你有一个可用于所有的 redis server 的标准配置模板， # 但针对某些 server 又需要一些个性化的设置， # 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。 # # 注意：include 是不能被 config rewrite 命令改写的 # 由于 redis 总是以最后的配置行作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面， # 以避免在运行时覆盖配置的改变； # 但是，如果你希望用 include 来覆盖配置，则应该将 include 作为最后一行。 # # include /path/to/local.conf # include /path/to/other.conf ################################## 模块 ##################################### # 启动时加载模块。如果服务器无法加载模块它会中止。 # 可以使用多个loadmodule指令 # # loadmodule /path/to/my_module.so # loadmodule /path/to/other_module.so ################################## 网络 ##################################### # 默认情况下，如果未指定 \"bind\" 配置指令，则 Redis将侦听 # 来自服务器上所有可用网络接口的连接。 # 可以只侦听一个或多个选定的接口 # \"bind\" 配置指令，后跟一个或多个 IP 地址。 # # 例如： # # bind 192.168.1.100 10.0.0.1 # bind 127.0.0.1 ::1 # # ~~~ 警告 ~~~ # 如果运行 Redis的计算机直接暴露在 internet，绑定到所有网络接口是危险的， # 会对互联网上对每个人暴露 Redis 实例 # 所以默认情况下我们强制 Redis 只监听 IPv4 lookback interface 地址 (这意味着 Redis 仅能够 # 接受来自本机对客户端连接). # # 如果你确定你希望所有网络接口都要监听 # 只需要注释下面的行 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 172.20.32.125 # 保护模式是一层安全防护，以免将 Redis 实例暴露在互联网上时，被非法访问。 # # 当保护模式打开并且： # # 1) 服务器没有使用 \"bind\" 指令显示绑定到一组地址。 # 2) 没有配置密码。 # # 服务器只接受来自以下客户端的连接： # IPv4 and IPv6 loopback 地址 127.0.0.1 and ::1, and from Unix domain sockets. # # 默认情况下启用保护模式。 # 如果你需要其他主机的客户端连接到 Redis， # 即使没有配置身份验证，也没有绑定特定的网络接口， # 可以选择进行禁用。 protected-mode no # 接受指定端口上的连接，默认为 6379 # 如果指定了端口 0，Redis将不会侦听 TCP socket. port 6379 # TCP listen() backlog. # [TCP/IP协议中backlog参数](https://www.cnblogs.com/Orgliny/p/5780796.html) # [TCP三次握手-backlog队列问题](https://blog.csdn.net/varyall/article/details/79681562) # # 此参数确定了 TCP 连接中已完成队列(完成三次握手之后)的长度， # 当然此值必须不大于Linux系统定义的 /proc/sys/net/core/somaxconn 值，默认是 511，而 Linux 的默认参数值是 128。 # 当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。 # 该内核参数默认值一般是 128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。 # 确保同时提高 somaxconn 和 tcp_max_syn_backlog 的值获得理想的效果。 # 例如：在 /etc/sysctl.conf中添加: net.core.somaxconn = 2048，然后在终端中执行 sysctl -p。 tcp-backlog 511 # 指定 redis 监听的 unix socket 路径，默认不启用，unixsocketper 指定文件的权限 # Unix socket. # # Specify the path for the Unix socket that will be used to listen for # incoming connections. There is no default, so Redis will not listen # on a unix socket when not specified. # # unixsocket /tmp/redis.sock # unixsocketperm 700 # 客户端空闲 N 秒后关闭连接(0表示禁用) timeout 0 # TCP keepalive 参数。如果设置不为 0，就使用配置 TCP 的 SO_KEEPALIVE 值， # 使用k eepalive有两个好处： # # 1) 检测挂掉的对端。 # 2) 降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。 # # 在 Linux 内核中，设置了 keepalive，redis 会定时给对端发送 ACKs。 # 注意，要关闭连接需要双倍的时间。 # 在其他内核上，周期取决于内核配置。 # # 这个选项从 Redis 3.2.1 开始加入，合理值是 300 秒。 tcp-keepalive 300 ################################# 常用 ##################################### # 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。 # 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。 daemonize yes # 可以通过 upstart 或者 systemd 来运行和管理 Redis 守护进程 # 选项： # supervised no - no supervision interaction # supervised upstart - signal upstart by putting Redis into SIGSTOP mode # supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET # supervised auto - detect upstart or systemd method based on # UPSTART_JOB or NOTIFY_SOCKET environment variables # Note: these supervision methods only signal \"process is ready.\" # They do not enable continuous liveness pings back to your supervisor. supervised no # 当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/run/redis.pid 文件里面， # 但是你可以在这里自己制定它的文件位置。 pidfile /var/run/redis_6379.pid 清园 沉没的Atlantis redis.conf配置详细解析 - 复制代码 # redis 配置文件示例 # 当你需要为某个配置项指定内存大小的时候，必须要带上单位， # 通常的格式就是 1k 5gb 4m 等酱紫： # # 1k => 1000 bytes # 1kb => 1024 bytes # 1m => 1000000 bytes # 1mb => 1024*1024 bytes # 1g => 1000000000 bytes # 1gb => 1024*1024*1024 bytes # # 单位是不区分大小写的，你写 1K 5GB 4M 也行 ################################## INCLUDES ################################### # 假如说你有一个可用于所有的 redis server 的标准配置模板， # 但针对某些 server 又需要一些个性化的设置， # 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。 # # 但是要注意哦，include 是不能被 config rewrite 命令改写的 # 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面， # 以避免在运行时覆盖配置的改变，相反，你就把它放在后面（外国人真啰嗦）。 # # include /path/to/local.conf # include /path/to/other.conf ################################ 常用 ##################################### # 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。 # 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。 daemonize no # 当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/run/redis.pid 文件里面， # 但是你可以在这里自己制定它的文件位置。 pidfile /var/run/redis.pid # 监听端口号，默认为 6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。 port 6379 # TCP 监听的最大容纳数量 # # 在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题。 # Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值， # 所以你要修改这两个值才能达到你的预期。 tcp-backlog 511 # 默认情况下，redis 在 server 上所有有效的网络接口上监听客户端连接。 # 你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP。 # # 示例，多个IP用空格隔开: # # bind 192.168.1.100 10.0.0.1 # bind 127.0.0.1 # 指定 unix socket 的路径。 # # unixsocket /tmp/redis.sock # unixsocketperm 755 # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它） timeout 0 # tcp 心跳包。 # # 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。 # 这个之所有有用，主要由两个原因： # # 1) 防止死的 peers # 2) Take the connection alive from the point of view of network # equipment in the middle. # # On Linux, the specified value (in seconds) is the period used to send ACKs. # Note that to close the connection the double of the time is needed. # On other kernels the period depends on the kernel configuration. # # A reasonable value for this option is 60 seconds. # 推荐一个合理的值就是60秒 tcp-keepalive 0 # 指定服务器的日志级别。 # 可以是下面的这些值： # debug (记录大量日志信息，适用于开发、测试阶段) # verbose (较多日志信息) # notice (适量日志信息，适用于生产环境) # warning (仅有部分重要、关键信息才会被记录) loglevel notice # 指定日志文件的位置， # 当指定为空字符串时，为标准输出，如果 redis 以守护进程模式运行，那么日志将会输出到 /dev/null logfile /var/log/redis_6379.log # 想把日志记录到系统日志，就把它改成 yes # syslog-enabled no # 设置系统日志的标识 # syslog-ident redis # 指定系统日志设置，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。 # syslog-facility local0 # 设置数据库的数目。默认的数据库是 DB 0， # 可以在每个连接上使用 select 命令选择一个不同的数据库， # dbid 是一个介于 0 到 databases - 1 之间的数值。 databases 16 # redis 启动时是否显示 Logo always-show-logo yes ################################ 快照 ################################ # # 存 DB 到磁盘： # 格式：save # 根据给定的时间间隔和写入次数将数据保存到磁盘 # 下面的例子的意思是： # 900 秒内如果至少有 1 个 key 的值变化，则保存 # 300 秒内如果至少有 10 个 key 的值变化，则保存 # 60 秒内如果至少有 10000 个 key 的值变化，则保存 # 　　 # 注意：你可以注释掉所有的 save 行来停用保存功能。 # 也可以直接一个空字符串来实现停用： # save \"\" save 900 1 save 300 10 save 60 10000 # 如果用户开启了RDB快照功能，那么在redis持久化数据到磁盘时如果出现失败，默认情况下，redis会停止接受所有的写请求。 # 这样做的好处在于可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。 # 如果redis不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。 # 如果下一次RDB持久化成功，redis会自动恢复接受写请求。 # 如果不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，可以关闭这个功能， # 以便在快照写入失败时，也能确保redis继续接受新的写请求。 stop-writes-on-bgsave-error yes # 对于存储到磁盘中的快照，可以设置是否进行压缩存储。 # 如果是的话，redis 会采用 LZF 算法进行压缩。如果你不想消耗 CPU 来进行压缩的话， # 可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。 rdbcompression yes # 在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗， # 如果希望获取到最大的性能提升，可以关闭此功能。 rdbchecksum yes # 设置快照的文件名 dbfilename dump.rdb # 设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。 dir /var/lib/redis/6379 ################################# 主从复制 ################################# # 主从复制，使用 slaveof 来让一个 redis 实例成为另一个 reids 实例的副本，默认关闭 # 注意这个只需要在 slave 上配置 # # 关于 Redis 复制，有几点需要尽快理解： # 1) Redis 主从复制是异步的 # 2) Redis 的从服务器能够执行部分重同步 # 3) 复制是自动的，不需要用户干预。 # # slaveof # 如果 master 需要密码认证，就在这里设置，默认不设置 # # masterauth # 当一个 slave 与 master 失去联系，或者复制正在进行的时候， # slave 可能会有两种表现： # # 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时， # 或者数据可能是空的在第一次同步的时候 # # 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时， # slave 都将返回一个 \"SYNC with master in progress\" 的错误， # slave-serve-stale-data yes # 从 redis 2.6 版起，默认 slaves 都是只读的。 # # 作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。 slave-read-only yes # 复制同步策略: disk or socket. # # ------------------------------------------------------- # 警告:无磁盘复制正在实验中 # ------------------------------------------------------- # # 新的 slave 和重连后不能继续备份的 slave ，需要做所谓的“完全备份”，即将一个RDB文件从 master 传送到 slave 。 # 这个传送有以下两种方式： # 1）硬盘备份：redis master 创建一个新的进程，用于把 RDB 文件写到硬盘上。过一会儿，其父进程递增地将文件传送给 slave 。 # 2）无硬盘备份：redis master 创建一个新的进程，子进程直接把 RDB 文件写到 slave 的套接字，不需要用到硬盘。 # 在硬盘备份的情况下， master 的子进程生成 RDB 文件。一旦生成，多个 slave 可以立即排成队列使用 master 的RDB文件。 # 如果使用无硬盘备份， master 会在开始传送之间等待一段时间（可配置，以秒为单位），希望等待多个子站到达后并行传送。 # 在硬盘低速而网络高速（高带宽）情况下，无硬盘备份更好。 repl-diskless-sync no # 当启用无硬盘备份，服务器等待一段时间后才会通过套接字向 slave 传送 RDB 文件，这个等待时间是可配置的。 # 这一点很重要，因为一旦传送开始，就不可能再为一个新到达的 slave 服务。 slave 则要排队等待下一次 RDB 传送。 # 因此服务器等待一段时间以期更多的 slave 到达。 # 延迟时间以秒为单位，默认为 5 秒。要关掉这一功能，只需将它设置为0秒，传送会立即启动。 # 一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。 repl-diskless-sync-delay 5 # slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。 # # repl-ping-slave-period 10 # 复制连接超时时间。master和slave都有超时时间的设置。 # master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。 # slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。 # 需要注意的是 repl-timeout 需要设置一个比 repl-ping-slave-period 更大的值，不然会经常检测到超时。 # # repl-timeout 60 # 是否禁止复制 tcp 链接的 tcp nodelay 参数，可传递 yes 或者 no。 # 默认是 no，即使用 tcp nodelay。如果 master 设置了 yes 来禁止 tcp nodelay 设置， # 在把数据复制给 slave 的时候，会减少包的数量和更小的网络带宽。 # 但是这也可能带来数据的延迟。 # 默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择 yes。 repl-disable-tcp-nodelay no # 复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。 # 这样在slave离线的时候，不需要完全复制 master 的数据， # 如果可以执行部分同步，只需要把缓冲区的部分数据复制给 slave，就能恢复正常复制状态。 # 缓冲区的大小越大，slave 离线的时间可以更长，复制缓冲区只有在有 slave 连接的时候才分配内存。 # 没有 slave 的一段时间，内存会被释放出来，默认 1mb。 # # repl-backlog-size 1mb # master 有一段时间没有与 slave 连接，对应的工作储备就会自动释放。 # 这个选项用于配置释放前等待的秒数，秒数从断开的那一刻开始计算，值为 0 表示不释放。 # # repl-backlog-ttl 3600 # 当 master 不可用，sentinel 会根据 slave 的优先级选举一个 master。 # 最低的优先级的 slave，当选 master。 # 因此如果有三个 slave 优先级分别是 10，100，25，sentinel 会选择优先级为 10 的 slave # 而配置成 0，永远不会被选举。 slave-priority 100 # redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write， # 健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。 # 这个配置虽然不能保证N个slave都一定能接收到master的写操作， # 但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。 # 设置为0是关闭该功能。 # 延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。 # master 可以停止接受写请求，当与它连接的 slave 少于N个，滞后少于M秒，N个 slave 必须是在线状态。 # 延迟的秒数必须 # 内存容量超过maxmemory后的处理策略。 # volatile-lru：利用LRU算法移除设置过过期时间的key。 # volatile-random：随机移除设置过过期时间的key。 # volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL） # allkeys-lru：利用LRU算法移除任何key。 # allkeys-random：随机移除任何key。 # noeviction：不移除任何key，只是返回一个写错误。 # 上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。 # redis将不再接收写请求，只接收get请求。 # 写命令包括： # set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset # rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd # zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby # decrby getset mset msetnx exec sort。 # maxmemory-policy noeviction # lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。 # # maxmemory-samples 5 ############################# LAZY FREEING #################################### # Redis有两个原语来删除键。一种叫做DEL，是对对象的阻塞删除。 # 这意味着服务器停止处理新的命令，以便以同步方式回收与对象相关联的所有内存。 # 如果被删除的键与一个小对象相关联，那么执行DEL命令所需的时间非常小，并且可以与Redis中的大多数O（1）或O（logn）命令相媲美。 # 然而，如果密钥与包含数百万个元素的聚合值相关联，那么服务器就可以阻塞很长时间（甚至几秒），以完成操作。 # 出于以上原因，Redis还提供非阻塞删除原语，如UNLINK（非阻塞DEL）和FLUSHALL和FLUSHDB命令的异步选项，以便在后台回收内存。 # 这些命令是在固定时间执行的。另一个线程会以最快的速度在后台以增量方式释放对象。 # DEL、UNLINK和FLUSHDB的异步选项是用户控制的。这取决于应用程序的设计，以了解什么时候使用一个或另一个是一个好主意。 # 然而，Redis服务器有时不得不删除键或刷新整个数据库，作为其他操作的副作用。具体来说，Redis在以下场景中独立于用户调用删除对象： # # 1) 在被驱逐的情况下，由于maxmemory和maxmemory政策配置，为了为新数据腾出空间，而不需要超过指定的内存限制。 # 2) 因为过期：当一个有关联时间的键（见过期命令）必须从内存中删除。 # 3) 因为一个命令的副作用，它将数据存储在可能已经存在的键上。 # 例如，RENAME命令可能会在替换旧钥匙内容时删除另一个。 # 类似的，SUNIONSTORE或SORT商店选项可以删除现有的密钥。SET命令本身删除指定钥匙的任何旧内容，以便用指定的字符串替换它。 # 4) 在复制过程中，当一个从服务与它的主服务执行完全的重新同步时，整个数据库的内容将被删除，以便加载刚刚传输的RDB文件。 # 在上述所有情况下，默认情况下是以阻塞方式删除对象，就像调用DEL一样。 # 但是，您可以专门配置每个案例，以便以非阻塞方式释放内存，就像调用UNLINK一样，使用以下配置指令： lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no slave-lazy-flush no ############################## 只附加模式(AOF) ############################### # 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。 # 但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save的策略进行持久化， # Append Only File是另一种持久化方式，可以提供更好的持久化特性。 # Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件， # 每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。 appendonly no # aof文件名 appendfilename \"appendonly.aof\" # aof持久化策略的配置 # no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。 # always表示每次写入都执行fsync，以保证数据同步到磁盘。 # everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。 # appendfsync always appendfsync everysec # appendfsync no # 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间， # no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no， # 这样对持久化特性来说这是更安全的选择。 # 设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。 # Linux的默认fsync策略是30秒。可能丢失30秒数据。 no-appendfsync-on-rewrite no # aof自动重写配置。 # 当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写， # 即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。 # 当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。 auto-aof-rewrite-percentage 100 # 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写 auto-aof-rewrite-min-size 64mb # aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。 # 重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。） # 出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。 # 如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。 # 如果是no，用户必须手动redis-check-aof修复AOF文件才可以。 aof-load-truncated yes # 在重写AOF文件时，Redis能够在AOF文件中使用RDB序言，以获得更快的重写和恢复。 # 当这个选项被打开时，重写的AOF文件由两个不同的小节组成： # # [RDB file][AOF tail] # # 加载Redis时，确认AOF文件以“Redis”字符串开头，并加载预固定的RDB文件，并继续加载AOF tail。 # # 这在默认情况下是关闭的，以避免格式更改的意外，但在某些时候会被用作默认值。 aof-use-rdb-preamble no ################################ LUA脚本 ############################### # 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。 # 当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。 # 第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。 lua-time-limit 5000 ################################ REDIS 集群 ############################### # # 集群开关，默认是不开启集群模式。 # cluster-enabled yes # 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。 # 这个文件并不需要手动配置，这个配置文件由Redis生成并更新， # 每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突 # # cluster-config-file nodes-6379.conf # 节点互连超时的阀值，集群节点超时毫秒数 # # cluster-node-timeout 15000 # 在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了， # 导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。 # 判断方法是： # 比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period # 如果节点超时时间为三十秒, 并且slave-validity-factor为10, # 假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 # # cluster-slave-validity-factor 10 # master的slave数量大于该值，slave才能迁移到其他孤立master上， # 如这个参数若被设为2，那么只有当一个主节点拥有2个可工作的从节点时，它的一个从节点会尝试迁移。 # # cluster-migration-barrier 1 # 默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。 # 设置为no，可以在slot没有全部分配的时候提供服务。 # 不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。 # # cluster-require-full-coverage yes # This option, when set to yes, prevents slaves from trying to failover its # master during master failures. However the master can still perform a # manual failover, if forced to do so. # # This is useful in different scenarios, especially in the case of multiple # data center operations, where we want one side to never be promoted if not # in the case of a total DC failure. # # cluster-slave-no-failover no # In order to setup your cluster make sure to read the documentation # available at http://redis.io web site. ########################## 集群DOCKER/NAT支持 ######################## # 在某些部署中，Redis集群节点地址发现失败，因为地址是NAT-ted，或者因为端口被转发（典型的例子是Docker和其他容器） # 为了使Redis集群在这样的环境中工作，需要一个静态配置，其中每个节点都知道它的公共地址。下面两个选项用于这个范围，并且是： # # * cluster-announce-ip # * cluster-announce-port # * cluster-announce-bus-port # # 每个节点都指示节点关于其地址、客户端端口和集群消息总线端口。 # 然后，这些信息将在总线数据包的头部中发布，这样其他节点就能够正确地映射出发布信息的节点的地址。 # 如果不使用上述选项，则将使用常规的Redis集群自动检测。 # 注意，当重新映射时，总线端口可能不会处于客户端端口+10000的固定偏移量，因此您可以根据它们的重新映射来指定任何端口和总线端口。 # 如果没有设置公共端口，则通常会使用1万的固定偏移量。 # # Example: # # cluster-announce-ip 10.1.1.5 # cluster-announce-port 6379 # cluster-announce-bus-port 6380 ################################## 慢日志 ################################### # slog log是用来记录redis运行中执行比较慢的命令耗时。 # 当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。 # 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。 # 注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。 slowlog-log-slower-than 10000 # 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。 # 你可以通过 SLOWLOG RESET 来释放内存。 slowlog-max-len 128 ################################ 延迟监控 ############################## # 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。 # 只记录大于等于下边设置的值的操作。0的话，就是关闭监视。 # 默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。 latency-monitor-threshold 0 ############################# 事件通知 ############################## # 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。 # 因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。 # notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知： # K 键空间通知，所有通知以 __keyspace@__ 为前缀 # E 键事件通知，所有通知以 __keyevent@__ 为前缀 # g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知 # $ 字符串命令的通知 # l 列表命令的通知 # s 集合命令的通知 # h 哈希命令的通知 # z 有序集合命令的通知 # x 过期事件：每当有过期键被删除时发送 # e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送 # A 参数 g$lshzxe 的别名 # 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。 notify-keyspace-events \"\" ############################### 高级配置 ############################### # hash类型的数据结构在编码上可以使用ziplist和hashtable。 # ziplist的特点就是文件存储(以及内存存储)所需的空间较小,在内容较小时,性能和hashtable几乎一样。 # 因此redis对hash类型默认采取ziplist。如果hash中条目的条目个数或者value长度达到阀值,将会被重构为hashtable。 # 这个参数指的是ziplist中允许存储的最大条目个数，默认为512，建议为128 hash-max-ziplist-entries 512 # ziplist中允许条目value值最大字节数，默认为64，建议为1024 hash-max-ziplist-value 64 # 当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。 # 比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。 # 当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5这五个值，每个值含义如下： # -5: 每个quicklist节点上的ziplist大小不能超过 64Kb。（注：1kb => 1024 bytes） # -4: 每个quicklist节点上的ziplist大小不能超过 32Kb。 # -3: 每个quicklist节点上的ziplist大小不能超过 16Kb。 # -2: 每个quicklist节点上的ziplist大小不能超过 8Kb。（-2是Redis给出的默认值） # -1: 每个quicklist节点上的ziplist大小不能超过 4Kb。 list-max-ziplist-size -2 # 这个参数表示一个quicklist两端不被压缩的节点个数。 # 注：这里的节点个数是指quicklist双向链表的节点个数，而不是指ziplist里面的数据项个数。 # 实际上，一个quicklist节点上的ziplist，如果被压缩，就是整体被压缩的。 # 参数list-compress-depth的取值含义如下： # 0: 是个特殊值，表示都不压缩。这是Redis的默认值。 # 1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。 # 2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。 # 3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。 # 依此类推… # 由于0是个特殊值，很容易看出quicklist的头节点和尾节点总是不被压缩的，以便于在表的两端进行快速存取。 list-compress-depth 0 # 数据量小于等于set-max-intset-entries用intset，大于set-max-intset-entries用set set-max-intset-entries 512 # 数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset zset-max-ziplist-entries 128 zset-max-ziplist-value 64 # value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse） # 大于hll-sparse-max-bytes使用稠密的数据结构（dense），一个比16000大的value是几乎没用的， 建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右 hll-sparse-max-bytes 3000 # Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。 # 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。 # 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存 activerehashing yes # 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。 # 对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit， # normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的 client-output-buffer-limit normal 0 0 0 # 对于slave client和MONITER client，如果client-output-buffer一旦超过256mb， # 又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。 client-output-buffer-limit slave 256mb 64mb 60 # 对于pubsub client，如果client-output-buffer一旦超过32mb， # 又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。 client-output-buffer-limit pubsub 32mb 8mb 60 # Client query buffers accumulate new commands. They are limited to a fixed # amount by default in order to avoid that a protocol desynchronization (for # instance due to a bug in the client) will lead to unbound memory usage in # the query buffer. However you can configure it here if you have very special # needs, such us huge multi/exec requests or alike. # # client-query-buffer-limit 1gb # In the Redis protocol, bulk requests, that are, elements representing single # strings, are normally limited ot 512 mb. However you can change this limit # here. # # proto-max-bulk-len 512mb # redis执行任务的频率为1s除以hz。 hz 10 # 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这 # 对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。 aof-rewrite-incremental-fsync yes # Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good # idea to start with the default settings and only change them after investigating # how to improve the performances and how the keys LFU change over time, which # is possible to inspect via the OBJECT FREQ command. # # There are two tunable parameters in the Redis LFU implementation: the # counter logarithm factor and the counter decay time. It is important to # understand what the two parameters mean before changing them. # # The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis # uses a probabilistic increment with logarithmic behavior. Given the value # of the old counter, when a key is accessed, the counter is incremented in # this way: # # 1. A random number R between 0 and 1 is extracted. # 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1). # 3. The counter is incremented only if R 原版配置文件 基于单机部署提取的原始配置文件，作为备份。 ## Generated by install_server.sh ## # Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k => 1000 bytes # 1kb => 1024 bytes # 1m => 1000000 bytes # 1mb => 1024*1024 bytes # 1g => 1000000000 bytes # 1gb => 1024*1024*1024 bytes # # units are case insensitive so 1GB 1Gb 1gB are all the same. ################################## INCLUDES ################################### # Include one or more other config files here. This is useful if you # have a standard template that goes to all Redis servers but also need # to customize a few per-server settings. Include files can include # other files, so use this wisely. # # Notice option \"include\" won't be rewritten by command \"CONFIG REWRITE\" # from admin or Redis Sentinel. Since Redis always uses the last processed # line as value of a configuration directive, you'd better put includes # at the beginning of this file to avoid overwriting config change at runtime. # # If instead you are interested in using includes to override configuration # options, it is better to use include as the last line. # # include /path/to/local.conf # include /path/to/other.conf ################################## MODULES ##################################### # Load modules at startup. If the server is not able to load modules # it will abort. It is possible to use multiple loadmodule directives. # # loadmodule /path/to/my_module.so # loadmodule /path/to/other_module.so ################################## NETWORK ##################################### # By default, if no \"bind\" configuration directive is specified, Redis listens # for connections from all the network interfaces available on the server. # It is possible to listen to just one or multiple selected interfaces using # the \"bind\" configuration directive, followed by one or more IP addresses. # # Examples: # # bind 192.168.1.100 10.0.0.1 # bind 172.20.32.125 ::1 # # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the # internet, binding to all the interfaces is dangerous and will expose the # instance to everybody on the internet. So by default we uncomment the # following bind directive, that will force Redis to listen only into # the IPv4 lookback interface address (this means Redis will be able to # accept connections only from clients running into the same computer it # is running). # # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 172.20.32.125 # Protected mode is a layer of security protection, in order to avoid that # Redis instances left open on the internet are accessed and exploited. # # When protected mode is on and if: # # 1) The server is not binding explicitly to a set of addresses using the # \"bind\" directive. # 2) No password is configured. # # The server only accepts connections from clients connecting from the # IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain # sockets. # # By default protected mode is enabled. You should disable it only if # you are sure you want clients from other hosts to connect to Redis # even if no authentication is configured, nor a specific set of interfaces # are explicitly listed using the \"bind\" directive. protected-mode no # Accept connections on the specified port, default is 6379 (IANA #815344). # If port 0 is specified Redis will not listen on a TCP socket. port 6379 # TCP listen() backlog. # # In high requests-per-second environments you need an high backlog in order # to avoid slow clients connections issues. Note that the Linux kernel # will silently truncate it to the value of /proc/sys/net/core/somaxconn so # make sure to raise both the value of somaxconn and tcp_max_syn_backlog # in order to get the desired effect. tcp-backlog 511 # Unix socket. # # Specify the path for the Unix socket that will be used to listen for # incoming connections. There is no default, so Redis will not listen # on a unix socket when not specified. # # unixsocket /tmp/redis.sock # unixsocketperm 700 # Close the connection after a client is idle for N seconds (0 to disable) timeout 0 # TCP keepalive. # # If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence # of communication. This is useful for two reasons: # # 1) Detect dead peers. # 2) Take the connection alive from the point of view of network # equipment in the middle. # # On Linux, the specified value (in seconds) is the period used to send ACKs. # Note that to close the connection the double of the time is needed. # On other kernels the period depends on the kernel configuration. # # A reasonable value for this option is 300 seconds, which is the new # Redis default starting with Redis 3.2.1. tcp-keepalive 300 ################################# GENERAL ##################################### # By default Redis does not run as a daemon. Use 'yes' if you need it. # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. daemonize yes # If you run Redis from upstart or systemd, Redis can interact with your # supervision tree. Options: # supervised no - no supervision interaction # supervised upstart - signal upstart by putting Redis into SIGSTOP mode # supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET # supervised auto - detect upstart or systemd method based on # UPSTART_JOB or NOTIFY_SOCKET environment variables # Note: these supervision methods only signal \"process is ready.\" # They do not enable continuous liveness pings back to your supervisor. supervised no # If a pid file is specified, Redis writes it where specified at startup # and removes it at exit. # # When the server runs non daemonized, no pid file is created if none is # specified in the configuration. When the server is daemonized, the pid file # is used even if not specified, defaulting to \"/var/run/redis.pid\". # # Creating a pid file is best effort: if Redis is not able to create it # nothing bad happens, the server will start and run normally. pidfile /var/run/redis_6379.pid # Specify the server verbosity level. # This can be one of: # debug (a lot of information, useful for development/testing) # verbose (many rarely useful info, but not a mess like the debug level) # notice (moderately verbose, what you want in production probably) # warning (only very important / critical messages are logged) loglevel notice # Specify the log file name. Also the empty string can be used to force # Redis to log on the standard output. Note that if you use standard # output for logging but daemonize, logs will be sent to /dev/null logfile /var/log/redis_6379.log # To enable logging to the system logger, just set 'syslog-enabled' to yes, # and optionally update the other syslog parameters to suit your needs. # syslog-enabled no # Specify the syslog identity. # syslog-ident redis # Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7. # syslog-facility local0 # Set the number of databases. The default database is DB 0, you can select # a different one on a per-connection basis using SELECT where # dbid is a number between 0 and 'databases'-1 databases 16 # By default Redis shows an ASCII art logo only when started to log to the # standard output and if the standard output is a TTY. Basically this means # that normally a logo is displayed only in interactive sessions. # # However it is possible to force the pre-4.0 behavior and always show a # ASCII art logo in startup logs by setting the following option to yes. always-show-logo yes ################################ SNAPSHOTTING ################################ # # Save the DB on disk: # # save # # Will save the DB if both the given number of seconds and the given # number of write operations against the DB occurred. # # In the example below the behaviour will be to save: # after 900 sec (15 min) if at least 1 key changed # after 300 sec (5 min) if at least 10 keys changed # after 60 sec if at least 10000 keys changed # # Note: you can disable saving completely by commenting out all \"save\" lines. # # It is also possible to remove all the previously configured save # points by adding a save directive with a single empty string argument # like in the following example: # # save \"\" save 900 1 save 300 10 save 60 10000 # By default Redis will stop accepting writes if RDB snapshots are enabled # (at least one save point) and the latest background save failed. # This will make the user aware (in a hard way) that data is not persisting # on disk properly, otherwise chances are that no one will notice and some # disaster will happen. # # If the background saving process will start working again Redis will # automatically allow writes again. # # However if you have setup your proper monitoring of the Redis server # and persistence, you may want to disable this feature so that Redis will # continue to work as usual even if there are problems with disk, # permissions, and so forth. stop-writes-on-bgsave-error yes # Compress string objects using LZF when dump .rdb databases? # For default that's set to 'yes' as it's almost always a win. # If you want to save some CPU in the saving child set it to 'no' but # the dataset will likely be bigger if you have compressible values or keys. rdbcompression yes # Since version 5 of RDB a CRC64 checksum is placed at the end of the file. # This makes the format more resistant to corruption but there is a performance # hit to pay (around 10%) when saving and loading RDB files, so you can disable it # for maximum performances. # # RDB files created with checksum disabled have a checksum of zero that will # tell the loading code to skip the check. rdbchecksum yes # The filename where to dump the DB dbfilename dump.rdb # The working directory. # # The DB will be written inside this directory, with the filename specified # above using the 'dbfilename' configuration directive. # # The Append Only File will also be created inside this directory. # # Note that you must specify a directory here, not a file name. dir /var/lib/redis/6379 ################################# REPLICATION ################################# # Master-Slave replication. Use slaveof to make a Redis instance a copy of # another Redis server. A few things to understand ASAP about Redis replication. # # 1) Redis replication is asynchronous, but you can configure a master to # stop accepting writes if it appears to be not connected with at least # a given number of slaves. # 2) Redis slaves are able to perform a partial resynchronization with the # master if the replication link is lost for a relatively small amount of # time. You may want to configure the replication backlog size (see the next # sections of this file) with a sensible value depending on your needs. # 3) Replication is automatic and does not need user intervention. After a # network partition slaves automatically try to reconnect to masters # and resynchronize with them. # # slaveof # If the master is password protected (using the \"requirepass\" configuration # directive below) it is possible to tell the slave to authenticate before # starting the replication synchronization process, otherwise the master will # refuse the slave request. # # masterauth # When a slave loses its connection with the master, or when the replication # is still in progress, the slave can act in two different ways: # # 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will # still reply to client requests, possibly with out of date data, or the # data set may just be empty if this is the first synchronization. # # 2) if slave-serve-stale-data is set to 'no' the slave will reply with # an error \"SYNC with master in progress\" to all the kind of commands # but to INFO and SLAVEOF. # slave-serve-stale-data yes # You can configure a slave instance to accept writes or not. Writing against # a slave instance may be useful to store some ephemeral data (because data # written on a slave will be easily deleted after resync with the master) but # may also cause problems if clients are writing to it because of a # misconfiguration. # # Since Redis 2.6 by default slaves are read-only. # # Note: read only slaves are not designed to be exposed to untrusted clients # on the internet. It's just a protection layer against misuse of the instance. # Still a read only slave exports by default all the administrative commands # such as CONFIG, DEBUG, and so forth. To a limited extent you can improve # security of read only slaves using 'rename-command' to shadow all the # administrative / dangerous commands. slave-read-only yes # Replication SYNC strategy: disk or socket. # # ------------------------------------------------------- # WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY # ------------------------------------------------------- # # New slaves and reconnecting slaves that are not able to continue the replication # process just receiving differences, need to do what is called a \"full # synchronization\". An RDB file is transmitted from the master to the slaves. # The transmission can happen in two different ways: # # 1) Disk-backed: The Redis master creates a new process that writes the RDB # file on disk. Later the file is transferred by the parent # process to the slaves incrementally. # 2) Diskless: The Redis master creates a new process that directly writes the # RDB file to slave sockets, without touching the disk at all. # # With disk-backed replication, while the RDB file is generated, more slaves # can be queued and served with the RDB file as soon as the current child producing # the RDB file finishes its work. With diskless replication instead once # the transfer starts, new slaves arriving will be queued and a new transfer # will start when the current one terminates. # # When diskless replication is used, the master waits a configurable amount of # time (in seconds) before starting the transfer in the hope that multiple slaves # will arrive and the transfer can be parallelized. # # With slow disks and fast (large bandwidth) networks, diskless replication # works better. repl-diskless-sync no # When diskless replication is enabled, it is possible to configure the delay # the server waits in order to spawn the child that transfers the RDB via socket # to the slaves. # # This is important since once the transfer starts, it is not possible to serve # new slaves arriving, that will be queued for the next RDB transfer, so the server # waits a delay in order to let more slaves arrive. # # The delay is specified in seconds, and by default is 5 seconds. To disable # it entirely just set it to 0 seconds and the transfer will start ASAP. repl-diskless-sync-delay 5 # Slaves send PINGs to server in a predefined interval. It's possible to change # this interval with the repl_ping_slave_period option. The default value is 10 # seconds. # # repl-ping-slave-period 10 # The following option sets the replication timeout for: # # 1) Bulk transfer I/O during SYNC, from the point of view of slave. # 2) Master timeout from the point of view of slaves (data, pings). # 3) Slave timeout from the point of view of masters (REPLCONF ACK pings). # # It is important to make sure that this value is greater than the value # specified for repl-ping-slave-period otherwise a timeout will be detected # every time there is low traffic between the master and the slave. # # repl-timeout 60 # Disable TCP_NODELAY on the slave socket after SYNC? # # If you select \"yes\" Redis will use a smaller number of TCP packets and # less bandwidth to send data to slaves. But this can add a delay for # the data to appear on the slave side, up to 40 milliseconds with # Linux kernels using a default configuration. # # If you select \"no\" the delay for data to appear on the slave side will # be reduced but more bandwidth will be used for replication. # # By default we optimize for low latency, but in very high traffic conditions # or when the master and slaves are many hops away, turning this to \"yes\" may # be a good idea. repl-disable-tcp-nodelay no # Set the replication backlog size. The backlog is a buffer that accumulates # slave data when slaves are disconnected for some time, so that when a slave # wants to reconnect again, often a full resync is not needed, but a partial # resync is enough, just passing the portion of data the slave missed while # disconnected. # # The bigger the replication backlog, the longer the time the slave can be # disconnected and later be able to perform a partial resynchronization. # # The backlog is only allocated once there is at least a slave connected. # # repl-backlog-size 1mb # After a master has no longer connected slaves for some time, the backlog # will be freed. The following option configures the amount of seconds that # need to elapse, starting from the time the last slave disconnected, for # the backlog buffer to be freed. # # Note that slaves never free the backlog for timeout, since they may be # promoted to masters later, and should be able to correctly \"partially # resynchronize\" with the slaves: hence they should always accumulate backlog. # # A value of 0 means to never release the backlog. # # repl-backlog-ttl 3600 # The slave priority is an integer number published by Redis in the INFO output. # It is used by Redis Sentinel in order to select a slave to promote into a # master if the master is no longer working correctly. # # A slave with a low priority number is considered better for promotion, so # for instance if there are three slaves with priority 10, 100, 25 Sentinel will # pick the one with priority 10, that is the lowest. # # However a special priority of 0 marks the slave as not able to perform the # role of master, so a slave with priority of 0 will never be selected by # Redis Sentinel for promotion. # # By default the priority is 100. slave-priority 100 # It is possible for a master to stop accepting writes if there are less than # N slaves connected, having a lag less or equal than M seconds. # # The N slaves need to be in \"online\" state. # # The lag in seconds, that must be before processing any other # commands. This might be useful in environments in which you do not trust # others with access to the host running redis-server. # # This should stay commented out for backward compatibility and because most # people do not need auth (e.g. they run their own servers). # # Warning: since Redis is pretty fast an outside user can try up to # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. # # requirepass foobared # Command renaming. # # It is possible to change the name of dangerous commands in a shared # environment. For instance the CONFIG command may be renamed into something # hard to guess so that it will still be available for internal-use tools # but not available for general clients. # # Example: # # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 # # It is also possible to completely kill a command by renaming it into # an empty string: # # rename-command CONFIG \"\" # # Please note that changing the name of commands that are logged into the # AOF file or transmitted to slaves may cause problems. ################################### CLIENTS #################################### # Set the max number of connected clients at the same time. By default # this limit is set to 10000 clients, however if the Redis server is not # able to configure the process file limit to allow for the specified limit # the max number of allowed clients is set to the current file limit # minus 32 (as Redis reserves a few file descriptors for internal uses). # # Once the limit is reached Redis will close all the new connections sending # an error 'max number of clients reached'. # # maxclients 10000 ############################## MEMORY MANAGEMENT ################################ # Set a memory usage limit to the specified amount of bytes. # When the memory limit is reached Redis will try to remove keys # according to the eviction policy selected (see maxmemory-policy). # # If Redis can't remove keys according to the policy, or if the policy is # set to 'noeviction', Redis will start to reply with errors to commands # that would use more memory, like SET, LPUSH, and so on, and will continue # to reply to read-only commands like GET. # # This option is usually useful when using Redis as an LRU or LFU cache, or to # set a hard memory limit for an instance (using the 'noeviction' policy). # # WARNING: If you have slaves attached to an instance with maxmemory on, # the size of the output buffers needed to feed the slaves are subtracted # from the used memory count, so that network problems / resyncs will # not trigger a loop where keys are evicted, and in turn the output # buffer of slaves is full with DELs of keys evicted triggering the deletion # of more keys, and so forth until the database is completely emptied. # # In short... if you have slaves attached it is suggested that you set a lower # limit for maxmemory so that there is some free RAM on the system for slave # output buffers (but this is not needed if the policy is 'noeviction'). # # maxmemory # MAXMEMORY POLICY: how Redis will select what to remove when maxmemory # is reached. You can select among five behaviors: # # volatile-lru -> Evict using approximated LRU among the keys with an expire set. # allkeys-lru -> Evict any key using approximated LRU. # volatile-lfu -> Evict using approximated LFU among the keys with an expire set. # allkeys-lfu -> Evict any key using approximated LFU. # volatile-random -> Remove a random key among the ones with an expire set. # allkeys-random -> Remove a random key, any key. # volatile-ttl -> Remove the key with the nearest expire time (minor TTL) # noeviction -> Don't evict anything, just return an error on write operations. # # LRU means Least Recently Used # LFU means Least Frequently Used # # Both LRU, LFU and volatile-ttl are implemented using approximated # randomized algorithms. # # Note: with any of the above policies, Redis will return an error on write # operations, when there are no suitable keys for eviction. # # At the date of writing these commands are: set setnx setex append # incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd # sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby # zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby # getset mset msetnx exec sort # # The default is: # # maxmemory-policy noeviction # LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated # algorithms (in order to save memory), so you can tune it for speed or # accuracy. For default Redis will check five keys and pick the one that was # used less recently, you can change the sample size using the following # configuration directive. # # The default of 5 produces good enough results. 10 Approximates very closely # true LRU but costs more CPU. 3 is faster but not very accurate. # # maxmemory-samples 5 ############################# LAZY FREEING #################################### # Redis has two primitives to delete keys. One is called DEL and is a blocking # deletion of the object. It means that the server stops processing new commands # in order to reclaim all the memory associated with an object in a synchronous # way. If the key deleted is associated with a small object, the time needed # in order to execute the DEL command is very small and comparable to most other # O(1) or O(log_N) commands in Redis. However if the key is associated with an # aggregated value containing millions of elements, the server can block for # a long time (even seconds) in order to complete the operation. # # For the above reasons Redis also offers non blocking deletion primitives # such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and # FLUSHDB commands, in order to reclaim memory in background. Those commands # are executed in constant time. Another thread will incrementally free the # object in the background as fast as possible. # # DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled. # It's up to the design of the application to understand when it is a good # idea to use one or the other. However the Redis server sometimes has to # delete keys or flush the whole database as a side effect of other operations. # Specifically Redis deletes objects independently of a user call in the # following scenarios: # # 1) On eviction, because of the maxmemory and maxmemory policy configurations, # in order to make room for new data, without going over the specified # memory limit. # 2) Because of expire: when a key with an associated time to live (see the # EXPIRE command) must be deleted from memory. # 3) Because of a side effect of a command that stores data on a key that may # already exist. For example the RENAME command may delete the old key # content when it is replaced with another one. Similarly SUNIONSTORE # or SORT with STORE option may delete existing keys. The SET command # itself removes any old content of the specified key in order to replace # it with the specified string. # 4) During replication, when a slave performs a full resynchronization with # its master, the content of the whole database is removed in order to # load the RDB file just transfered. # # In all the above cases the default is to delete objects in a blocking way, # like if DEL was called. However you can configure each case specifically # in order to instead release memory in a non-blocking way like if UNLINK # was called, using the following configuration directives: lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no slave-lazy-flush no ############################## APPEND ONLY MODE ############################### # By default Redis asynchronously dumps the dataset on disk. This mode is # good enough in many applications, but an issue with the Redis process or # a power outage may result into a few minutes of writes lost (depending on # the configured save points). # # The Append Only File is an alternative persistence mode that provides # much better durability. For instance using the default data fsync policy # (see later in the config file) Redis can lose just one second of writes in a # dramatic event like a server power outage, or a single write if something # wrong with the Redis process itself happens, but the operating system is # still running correctly. # # AOF and RDB persistence can be enabled at the same time without problems. # If the AOF is enabled on startup Redis will load the AOF, that is the file # with the better durability guarantees. # # Please check http://redis.io/topics/persistence for more information. appendonly no # The name of the append only file (default: \"appendonly.aof\") appendfilename \"appendonly.aof\" # The fsync() call tells the Operating System to actually write data on disk # instead of waiting for more data in the output buffer. Some OS will really flush # data on disk, some other OS will just try to do it ASAP. # # Redis supports three different modes: # # no: don't fsync, just let the OS flush the data when it wants. Faster. # always: fsync after every write to the append only log. Slow, Safest. # everysec: fsync only one time every second. Compromise. # # The default is \"everysec\", as that's usually the right compromise between # speed and data safety. It's up to you to understand if you can relax this to # \"no\" that will let the operating system flush the output buffer when # it wants, for better performances (but if you can live with the idea of # some data loss consider the default persistence mode that's snapshotting), # or on the contrary, use \"always\" that's very slow but a bit safer than # everysec. # # More details please check the following article: # http://antirez.com/post/redis-persistence-demystified.html # # If unsure, use \"everysec\". # appendfsync always appendfsync everysec # appendfsync no # When the AOF fsync policy is set to always or everysec, and a background # saving process (a background save or AOF log background rewriting) is # performing a lot of I/O against the disk, in some Linux configurations # Redis may block too long on the fsync() call. Note that there is no fix for # this currently, as even performing fsync in a different thread will block # our synchronous write(2) call. # # In order to mitigate this problem it's possible to use the following option # that will prevent fsync() from being called in the main process while a # BGSAVE or BGREWRITEAOF is in progress. # # This means that while another child is saving, the durability of Redis is # the same as \"appendfsync none\". In practical terms, this means that it is # possible to lose up to 30 seconds of log in the worst scenario (with the # default Linux settings). # # If you have latency problems turn this to \"yes\". Otherwise leave it as # \"no\" that is the safest pick from the point of view of durability. no-appendfsync-on-rewrite no # Automatic rewrite of the append only file. # Redis is able to automatically rewrite the log file implicitly calling # BGREWRITEAOF when the AOF log size grows by the specified percentage. # # This is how it works: Redis remembers the size of the AOF file after the # latest rewrite (if no rewrite has happened since the restart, the size of # the AOF at startup is used). # # This base size is compared to the current size. If the current size is # bigger than the specified percentage, the rewrite is triggered. Also # you need to specify a minimal size for the AOF file to be rewritten, this # is useful to avoid rewriting the AOF file even if the percentage increase # is reached but it is still pretty small. # # Specify a percentage of zero in order to disable the automatic AOF # rewrite feature. auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb # An AOF file may be found to be truncated at the end during the Redis # startup process, when the AOF data gets loaded back into memory. # This may happen when the system where Redis is running # crashes, especially when an ext4 filesystem is mounted without the # data=ordered option (however this can't happen when Redis itself # crashes or aborts but the operating system still works correctly). # # Redis can either exit with an error when this happens, or load as much # data as possible (the default now) and start if the AOF file is found # to be truncated at the end. The following option controls this behavior. # # If aof-load-truncated is set to yes, a truncated AOF file is loaded and # the Redis server starts emitting a log to inform the user of the event. # Otherwise if the option is set to no, the server aborts with an error # and refuses to start. When the option is set to no, the user requires # to fix the AOF file using the \"redis-check-aof\" utility before to restart # the server. # # Note that if the AOF file will be found to be corrupted in the middle # the server will still exit with an error. This option only applies when # Redis will try to read more data from the AOF file but not enough bytes # will be found. aof-load-truncated yes # When rewriting the AOF file, Redis is able to use an RDB preamble in the # AOF file for faster rewrites and recoveries. When this option is turned # on the rewritten AOF file is composed of two different stanzas: # # [RDB file][AOF tail] # # When loading Redis recognizes that the AOF file starts with the \"REDIS\" # string and loads the prefixed RDB file, and continues loading the AOF # tail. # # This is currently turned off by default in order to avoid the surprise # of a format change, but will at some point be used as the default. aof-use-rdb-preamble no ################################ LUA SCRIPTING ############################### # Max execution time of a Lua script in milliseconds. # # If the maximum execution time is reached Redis will log that a script is # still in execution after the maximum allowed time and will start to # reply to queries with an error. # # When a long running script exceeds the maximum execution time only the # SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be # used to stop a script that did not yet called write commands. The second # is the only way to shut down the server in the case a write command was # already issued by the script but the user doesn't want to wait for the natural # termination of the script. # # Set it to 0 or a negative value for unlimited execution without warnings. lua-time-limit 5000 ################################ REDIS CLUSTER ############################### # # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ # WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however # in order to mark it as \"mature\" we need to wait for a non trivial percentage # of users to deploy it in production. # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ # # Normal Redis instances can't be part of a Redis Cluster; only nodes that are # started as cluster nodes can. In order to start a Redis instance as a # cluster node enable the cluster support uncommenting the following: # # cluster-enabled yes # Every cluster node has a cluster configuration file. This file is not # intended to be edited by hand. It is created and updated by Redis nodes. # Every Redis Cluster node requires a different cluster configuration file. # Make sure that instances running in the same system do not have # overlapping cluster configuration file names. # # cluster-config-file nodes-6379.conf # Cluster node timeout is the amount of milliseconds a node must be unreachable # for it to be considered in failure state. # Most other internal time limits are multiple of the node timeout. # # cluster-node-timeout 15000 # A slave of a failing master will avoid to start a failover if its data # looks too old. # # There is no simple way for a slave to actually have an exact measure of # its \"data age\", so the following two checks are performed: # # 1) If there are multiple slaves able to failover, they exchange messages # in order to try to give an advantage to the slave with the best # replication offset (more data from the master processed). # Slaves will try to get their rank by offset, and apply to the start # of the failover a delay proportional to their rank. # # 2) Every single slave computes the time of the last interaction with # its master. This can be the last ping or command received (if the master # is still in the \"connected\" state), or the time that elapsed since the # disconnection with the master (if the replication link is currently down). # If the last interaction is too old, the slave will not try to failover # at all. # # The point \"2\" can be tuned by user. Specifically a slave will not perform # the failover if, since the last interaction with the master, the time # elapsed is greater than: # # (node-timeout * slave-validity-factor) + repl-ping-slave-period # # So for example if node-timeout is 30 seconds, and the slave-validity-factor # is 10, and assuming a default repl-ping-slave-period of 10 seconds, the # slave will not try to failover if it was not able to talk with the master # for longer than 310 seconds. # # A large slave-validity-factor may allow slaves with too old data to failover # a master, while a too small value may prevent the cluster from being able to # elect a slave at all. # # For maximum availability, it is possible to set the slave-validity-factor # to a value of 0, which means, that slaves will always try to failover the # master regardless of the last time they interacted with the master. # (However they'll always try to apply a delay proportional to their # offset rank). # # Zero is the only value able to guarantee that when all the partitions heal # the cluster will always be able to continue. # # cluster-slave-validity-factor 10 # Cluster slaves are able to migrate to orphaned masters, that are masters # that are left without working slaves. This improves the cluster ability # to resist to failures as otherwise an orphaned master can't be failed over # in case of failure if it has no working slaves. # # Slaves migrate to orphaned masters only if there are still at least a # given number of other working slaves for their old master. This number # is the \"migration barrier\". A migration barrier of 1 means that a slave # will migrate only if there is at least 1 other working slave for its master # and so forth. It usually reflects the number of slaves you want for every # master in your cluster. # # Default is 1 (slaves migrate only if their masters remain with at least # one slave). To disable migration just set it to a very large value. # A value of 0 can be set but is useful only for debugging and dangerous # in production. # # cluster-migration-barrier 1 # By default Redis Cluster nodes stop accepting queries if they detect there # is at least an hash slot uncovered (no available node is serving it). # This way if the cluster is partially down (for example a range of hash slots # are no longer covered) all the cluster becomes, eventually, unavailable. # It automatically returns available as soon as all the slots are covered again. # # However sometimes you want the subset of the cluster which is working, # to continue to accept queries for the part of the key space that is still # covered. In order to do so, just set the cluster-require-full-coverage # option to no. # # cluster-require-full-coverage yes # This option, when set to yes, prevents slaves from trying to failover its # master during master failures. However the master can still perform a # manual failover, if forced to do so. # # This is useful in different scenarios, especially in the case of multiple # data center operations, where we want one side to never be promoted if not # in the case of a total DC failure. # # cluster-slave-no-failover no # In order to setup your cluster make sure to read the documentation # available at http://redis.io web site. ########################## CLUSTER DOCKER/NAT support ######################## # In certain deployments, Redis Cluster nodes address discovery fails, because # addresses are NAT-ted or because ports are forwarded (the typical case is # Docker and other containers). # # In order to make Redis Cluster working in such environments, a static # configuration where each node knows its public address is needed. The # following two options are used for this scope, and are: # # * cluster-announce-ip # * cluster-announce-port # * cluster-announce-bus-port # # Each instruct the node about its address, client port, and cluster message # bus port. The information is then published in the header of the bus packets # so that other nodes will be able to correctly map the address of the node # publishing the information. # # If the above options are not used, the normal Redis Cluster auto-detection # will be used instead. # # Note that when remapped, the bus port may not be at the fixed offset of # clients port + 10000, so you can specify any port and bus-port depending # on how they get remapped. If the bus-port is not set, a fixed offset of # 10000 will be used as usually. # # Example: # # cluster-announce-ip 10.1.1.5 # cluster-announce-port 6379 # cluster-announce-bus-port 6380 ################################## SLOW LOG ################################### # The Redis Slow Log is a system to log queries that exceeded a specified # execution time. The execution time does not include the I/O operations # like talking with the client, sending the reply and so forth, # but just the time needed to actually execute the command (this is the only # stage of command execution where the thread is blocked and can not serve # other requests in the meantime). # # You can configure the slow log with two parameters: one tells Redis # what is the execution time, in microseconds, to exceed in order for the # command to get logged, and the other parameter is the length of the # slow log. When a new command is logged the oldest one is removed from the # queue of logged commands. # The following time is expressed in microseconds, so 1000000 is equivalent # to one second. Note that a negative number disables the slow log, while # a value of zero forces the logging of every command. slowlog-log-slower-than 10000 # There is no limit to this length. Just be aware that it will consume memory. # You can reclaim memory used by the slow log with SLOWLOG RESET. slowlog-max-len 128 ################################ LATENCY MONITOR ############################## # The Redis latency monitoring subsystem samples different operations # at runtime in order to collect data related to possible sources of # latency of a Redis instance. # # Via the LATENCY command this information is available to the user that can # print graphs and obtain reports. # # The system only logs operations that were performed in a time equal or # greater than the amount of milliseconds specified via the # latency-monitor-threshold configuration directive. When its value is set # to zero, the latency monitor is turned off. # # By default latency monitoring is disabled since it is mostly not needed # if you don't have latency issues, and collecting data has a performance # impact, that while very small, can be measured under big load. Latency # monitoring can easily be enabled at runtime using the command # \"CONFIG SET latency-monitor-threshold \" if needed. latency-monitor-threshold 0 ############################# EVENT NOTIFICATION ############################## # Redis can notify Pub/Sub clients about events happening in the key space. # This feature is documented at http://redis.io/topics/notifications # # For instance if keyspace events notification is enabled, and a client # performs a DEL operation on key \"foo\" stored in the Database 0, two # messages will be published via Pub/Sub: # # PUBLISH __keyspace@0__:foo del # PUBLISH __keyevent@0__:del foo # # It is possible to select the events that Redis will notify among a set # of classes. Every class is identified by a single character: # # K Keyspace events, published with __keyspace@__ prefix. # E Keyevent events, published with __keyevent@__ prefix. # g Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ... # $ String commands # l List commands # s Set commands # h Hash commands # z Sorted set commands # x Expired events (events generated every time a key expires) # e Evicted events (events generated when a key is evicted for maxmemory) # A Alias for g$lshzxe, so that the \"AKE\" string means all the events. # # The \"notify-keyspace-events\" takes as argument a string that is composed # of zero or multiple characters. The empty string means that notifications # are disabled. # # Example: to enable list and generic events, from the point of view of the # event name, use: # # notify-keyspace-events Elg # # Example 2: to get the stream of the expired keys subscribing to channel # name __keyevent@0__:expired use: # # notify-keyspace-events Ex # # By default all notifications are disabled because most users don't need # this feature and the feature has some overhead. Note that if you don't # specify at least one of K or E, no events will be delivered. notify-keyspace-events \"\" ############################### ADVANCED CONFIG ############################### # Hashes are encoded using a memory efficient data structure when they have a # small number of entries, and the biggest entry does not exceed a given # threshold. These thresholds can be configured using the following directives. hash-max-ziplist-entries 512 hash-max-ziplist-value 64 # Lists are also encoded in a special way to save a lot of space. # The number of entries allowed per internal list node can be specified # as a fixed maximum size or a maximum number of elements. # For a fixed maximum size, use -5 through -1, meaning: # -5: max size: 64 Kb node->node->...->node->[tail] # [head], [tail] will always be uncompressed; inner nodes will compress. # 2: [head]->[next]->node->node->...->node->[prev]->[tail] # 2 here means: don't compress head or head->next or tail->prev or tail, # but compress all nodes between them. # 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail] # etc. list-compress-depth 0 # Sets have a special encoding in just one case: when a set is composed # of just strings that happen to be integers in radix 10 in the range # of 64 bit signed integers. # The following configuration setting sets the limit in the size of the # set in order to use this special memory saving encoding. set-max-intset-entries 512 # Similarly to hashes and lists, sorted sets are also specially encoded in # order to save a lot of space. This encoding is only used when the length and # elements of a sorted set are below the following limits: zset-max-ziplist-entries 128 zset-max-ziplist-value 64 # HyperLogLog sparse representation bytes limit. The limit includes the # 16 bytes header. When an HyperLogLog using the sparse representation crosses # this limit, it is converted into the dense representation. # # A value greater than 16000 is totally useless, since at that point the # dense representation is more memory efficient. # # The suggested value is ~ 3000 in order to have the benefits of # the space efficient encoding without slowing down too much PFADD, # which is O(N) with the sparse encoding. The value can be raised to # ~ 10000 when CPU is not a concern, but space is, and the data set is # composed of many HyperLogLogs with cardinality in the 0 - 15000 range. hll-sparse-max-bytes 3000 # Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in # order to help rehashing the main Redis hash table (the one mapping top-level # keys to values). The hash table implementation Redis uses (see dict.c) # performs a lazy rehashing: the more operation you run into a hash table # that is rehashing, the more rehashing \"steps\" are performed, so if the # server is idle the rehashing is never complete and some more memory is used # by the hash table. # # The default is to use this millisecond 10 times every second in order to # actively rehash the main dictionaries, freeing memory when possible. # # If unsure: # use \"activerehashing no\" if you have hard latency requirements and it is # not a good thing in your environment that Redis can reply from time to time # to queries with 2 milliseconds delay. # # use \"activerehashing yes\" if you don't have such hard requirements but # want to free memory asap when possible. activerehashing yes # The client output buffer limits can be used to force disconnection of clients # that are not reading data from the server fast enough for some reason (a # common reason is that a Pub/Sub client can't consume messages as fast as the # publisher can produce them). # # The limit can be set differently for the three different classes of clients: # # normal -> normal clients including MONITOR clients # slave -> slave clients # pubsub -> clients subscribed to at least one pubsub channel or pattern # # The syntax of every client-output-buffer-limit directive is the following: # # client-output-buffer-limit # # A client is immediately disconnected once the hard limit is reached, or if # the soft limit is reached and remains reached for the specified number of # seconds (continuously). # So for instance if the hard limit is 32 megabytes and the soft limit is # 16 megabytes / 10 seconds, the client will get disconnected immediately # if the size of the output buffers reach 32 megabytes, but will also get # disconnected if the client reaches 16 megabytes and continuously overcomes # the limit for 10 seconds. # # By default normal clients are not limited because they don't receive data # without asking (in a push way), but just after a request, so only # asynchronous clients may create a scenario where data is requested faster # than it can read. # # Instead there is a default limit for pubsub and slave clients, since # subscribers and slaves receive data in a push fashion. # # Both the hard or the soft limit can be disabled by setting them to zero. client-output-buffer-limit normal 0 0 0 client-output-buffer-limit slave 256mb 64mb 60 client-output-buffer-limit pubsub 32mb 8mb 60 # Client query buffers accumulate new commands. They are limited to a fixed # amount by default in order to avoid that a protocol desynchronization (for # instance due to a bug in the client) will lead to unbound memory usage in # the query buffer. However you can configure it here if you have very special # needs, such us huge multi/exec requests or alike. # # client-query-buffer-limit 1gb # In the Redis protocol, bulk requests, that are, elements representing single # strings, are normally limited ot 512 mb. However you can change this limit # here. # # proto-max-bulk-len 512mb # Redis calls an internal function to perform many background tasks, like # closing connections of clients in timeout, purging expired keys that are # never requested, and so forth. # # Not all tasks are performed with the same frequency, but Redis checks for # tasks to perform according to the specified \"hz\" value. # # By default \"hz\" is set to 10. Raising the value will use more CPU when # Redis is idle, but at the same time will make Redis more responsive when # there are many keys expiring at the same time, and timeouts may be # handled with more precision. # # The range is between 1 and 500, however a value over 100 is usually not # a good idea. Most users should use the default of 10 and raise this up to # 100 only in environments where very low latency is required. hz 10 # When a child rewrites the AOF file, if the following option is enabled # the file will be fsync-ed every 32 MB of data generated. This is useful # in order to commit the file to the disk more incrementally and avoid # big latency spikes. aof-rewrite-incremental-fsync yes # Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good # idea to start with the default settings and only change them after investigating # how to improve the performances and how the keys LFU change over time, which # is possible to inspect via the OBJECT FREQ command. # # There are two tunable parameters in the Redis LFU implementation: the # counter logarithm factor and the counter decay time. It is important to # understand what the two parameters mean before changing them. # # The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis # uses a probabilistic increment with logarithmic behavior. Given the value # of the old counter, when a key is accessed, the counter is incremented in # this way: # # 1. A random number R between 0 and 1 is extracted. # 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1). # 3. The counter is incremented only if R Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/131_我的常用配置文件.html":{"url":"redis/131_我的常用配置文件.html","title":"我的常用配置文件","keywords":"","body":"我的常用配置文件 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/140_Redis常用命令.html":{"url":"redis/140_Redis常用命令.html","title":"Redis常用命令","keywords":"","body":"Redis常用命令 Redis 命令采用单线程执行。 执行过程：发送指令--》执行命令--》返回结果 执行命令：单线程执行，所有命令进入队列，按顺序执行，使用I/O多路复用解决I/O问题 单线程快的原因：纯内存访问，非阻塞I/O（使用多路复用），单线程避免线程切换和竞争产生资源消耗。 # 设置键值 127.0.0.1:6379> set name zorin OK 127.0.0.1:6379> set name2 fubao OK # keys * 查看所有键 127.0.0.1:6379> keys * 1) \"name2\" 2) \"name\" # 获取键值 127.0.0.1:6379> get name \"zorin\" 127.0.0.1:6379> get name2 \"fubao\" # 查看键的数据结构类型：返回类型的 string，键不存在返回 none 127.0.0.1:6379> type name string 127.0.0.1:6379> type name3 none # 查看当前所在 redis 库的键总数 # 因线上存在大量的键，因此禁止使用此指令 127.0.0.1:6379> dbsize (integer) 2 # 检查键是否存在，存在返回 1，不存在返回 0 127.0.0.1:6379> exists name (integer) 1 127.0.0.1:6379> exists name1 (integer) 0 # 删除键，返回删除键个数，删除不存在键返回 0 127.0.0.1:6379> del name2 name1 (integer) 1 127.0.0.1:6379> del name1 (integer) 0 # expire 设置键过期的时间，单位是秒 # ttl 查看键过期剩余的时间，单位是秒 127.0.0.1:6379> expire name 10 (integer) 1 127.0.0.1:6379> get name \"zorin\" 127.0.0.1:6379> ttl name (integer) 7 127.0.0.1:6379> ttl name (integer) 6 127.0.0.1:6379> ttl name (integer) 5 127.0.0.1:6379> ttl name (integer) 4 127.0.0.1:6379> ttl name (integer) 3 127.0.0.1:6379> ttl name (integer) 2 127.0.0.1:6379> ttl name (integer) 1 127.0.0.1:6379> ttl name (integer) -2 127.0.0.1:6379> get name (nil) 127.0.0.1:6379> keys * 1) \"foo\" # 设置键同时设置过期时间 127.0.0.1:6379> set name zorin ex 10 OK # 不存在键 name 时才能设置，返回 1 设置成功；存在的话失败，返回 0 127.0.0.1:6379> setnx name zorin (integer) 1 127.0.0.1:6379> setnx name yanglei (integer) 0 # 批量设置和批量获取 127.0.0.1:6379> mset country china city shenzhen OK 127.0.0.1:6379> mget country city address 1) \"china\" 2) \"shenzhen\" 3) (nil) # 计数 # 必须为整数自加 1，非整数返回错误，无 age 键从 0 自增返回 1 127.0.0.1:6379> set age 10 OK 127.0.0.1:6379> incr age (integer) 11 127.0.0.1:6379> incr age (integer) 12 127.0.0.1:6379> decr age (integer) 11 127.0.0.1:6379> decr age (integer) 10 127.0.0.1:6379> decr age (integer) 9 127.0.0.1:6379> expire age 2 (integer) 1 127.0.0.1:6379> incr age (integer) 1 127.0.0.1:6379> incr age (integer) 2 127.0.0.1:6379> set age 10 OK 127.0.0.1:6379> incrby age 2 (integer) 12 127.0.0.1:6379> incrbyfloat age 4.4 \"16.4\" 127.0.0.1:6379> incrbyfloat age -4.4 \"12\" 127.0.0.1:6379> decrby age 3 (integer) 9 127.0.0.1:6379> incrbyfloat age 4.4 \"13.4\" 127.0.0.1:6379> decrby age 2 (error) ERR value is not an integer or out of range # 字符串键值追加 127.0.0.1:6379> set name \"hello \" OK 127.0.0.1:6379> append name \"world!\" (integer) 12 127.0.0.1:6379> get name \"hello world!\" # 截取字符串 127.0.0.1:6379> getrange name 0 5 \"hello \" 127.0.0.1:6379> getrange name 6 11 \"world!\" # 获取内部编码 # int: 8 字节长整型 # embstr: 小于等于 39 字节串 # raw: 大于 39 字节的字符串 127.0.0.1:6379> get age \"100\" 127.0.0.1:6379> object encoding age \"int\" 127.0.0.1:6379> set name bejin OK 127.0.0.1:6379> object encoding name \"embstr\" 127.0.0.1:6379> set name aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa OK 127.0.0.1:6379> object encoding name \"raw\" # 切回数据库，只有 16 个库，索引为 0～15 127.0.0.1:6379> select 1 OK 127.0.0.1:6379[1]> select 16 (error) ERR DB index is out of range 127.0.0.1:6379[1]> select 15 OK 127.0.0.1:6379[15]> select 0 OK # 临时配置数据库密码 # 永久修改更改配置文件，加了密码后，需同时修改 /etc/init.d/redis_6379 的 stop 方法，加入密码，才能正常关闭服务器 127.0.0.1:6379> config set requirepass 123456 127.0.0.1:6379> keys * (error) NOAUTH Authentication required. 127.0.0.1:6379> quit redis-cli -p 6379 -a 123456 127.0.0.1:6379> keys * 1) \"city\" 2) \"age\" # 模糊查询 keys # 考虑到是单线程，在生产环境不建议使用，如果键多可能会阻塞，如果键少，才考虑使用 127.0.0.1:6379> keys c*y 1) \"city\" 2) \"country\" 127.0.0.1:6379> keys ci*y 1) \"city\" 127.0.0.1:6379> keys n?m* 1) \"name\" 127.0.0.1:6379> keys [c,n]* 1) \"city\" 2) \"country\" 3) \"name\" # 渐进式遍历查询 # 渐进式遍历可有效地解决 keys 命令可能产生的阻塞问题 # 除 scan 字符串外，还有以下： # scan 命令用于迭代当前数据库中的数据库键。 # sscan 命令用于迭代集合键中的元素。 # hscan 命令用于迭代哈希键中的键值对。 # zscan 命令用于迭代有序集合中的元素（包括元素成员和元素分值）。 # 用法和 scan 一样 127.0.0.1:6379> select 1 127.0.0.1:6379[1]> mset a a b b c c d d e e f f g g h h i i j j k k l l m m n n o o p p q q r r s s t t u u v v w w x x y y z z 127.0.0.1:6379[1]> scan 0 match k* count 50 1) \"0\" 2) 1) \"k\" # 清空当前数据库的键值对，慎用！！！ 127.0.0.1:6379[1]> flushdb OK 127.0.0.1:6379[1]> keys * (empty list or set) 127.0.0.1:6379[1]> dbsize (integer) 0 # 清空所有库的键值对，慎用！！！ # 127.0.0.1:6379> flushall Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/150_Redis数据类型.html":{"url":"redis/150_Redis数据类型.html","title":"Redis数据类型","keywords":"","body":"Redis数据类型 字符串类型 可以是字符串（包括XML JSON），数字（整形 浮点数），二进制（图片 音频 视频），最大不能超过512MB。 哈希 hash 127.0.0.1:6379> hmset user:1 name yanglei age 28 sex man OK 127.0.0.1:6379> hmget user:1 name age sex 1) \"yanglei\" 2) \"28\" 3) \"man\" # 判断 field 是否存在 127.0.0.1:6379> hexists user:2 name (integer) 0 127.0.0.1:6379> hexists user:1 name (integer) 1 # 获取 user:1 所有的 field 127.0.0.1:6379> hkeys user:2 (empty list or set) 127.0.0.1:6379> hkeys user:1 1) \"name\" 2) \"age\" 3) \"sex\" # 获取 user:1 所有value 127.0.0.1:6379> hvals user:2 (empty list or set) 127.0.0.1:6379> hvals user:1 1) \"yanglei\" 2) \"28\" 3) \"man\" # 获取 user:1 所有的 field 与 value 127.0.0.1:6379> hgetall user:2 (empty list or set) 127.0.0.1:6379> hgetall user:1 1) \"name\" 2) \"yanglei\" 3) \"age\" 4) \"28\" 5) \"sex\" 6) \"man\" # 内部编码：ziplist 和 hashtable # 当 field 个数少且没有大的 value 时，内部编码为 ziplist # 当 value 大于 64 字节，内部编码由 ziplist 变成 hashtable 127.0.0.1:6379> object encoding user:1 \"ziplist\" 列表 list 用来存储多个有序的字符串，一个列表最多可存 2 的 32 次方减 1 个元素 因为有序，可以通过索引下标获取元素或某个范围内元素列表，列表元素可以重复 添加命令：rpush lpush linset 查找命令：lrange lindex llen 删除命令：lpop rpop lrem ltrim 修改命令：lset 阻塞命令：blpop brpop 127.0.0.1:6379> hmset order:1 orderId 1 money 36.6 time 2018-01-01 OK 127.0.0.1:6379> hmset order:2 orderId 2 money 38.6 time 2018-01-01 OK 127.0.0.1:6379> hmset order:3 orderId 3 money 39.6 time 2018-01-01 OK 127.0.0.1:6379> hgetall order:1 1) \"orderId\" 2) \"1\" 3) \"money\" 4) \"36.6\" 5) \"time\" 6) \"2018-01-01\" 127.0.0.1:6379> hgetall order:2 1) \"orderId\" 2) \"2\" 3) \"money\" 4) \"38.6\" 5) \"time\" 6) \"2018-01-01\" 127.0.0.1:6379> hgetall order:3 1) \"orderId\" 2) \"3\" 3) \"money\" 4) \"39.6\" 5) \"time\" 6) \"2018-01-01\" 127.0.0.1:6379> lpush user:2:order order:1 order:2 order:3 (integer) 3 127.0.0.1:6379> lrange user:2:order 0 2 1) \"order:3\" 2) \"order:2\" 3) \"order:1\" 127.0.0.1:6379> hmset order:4 orderId 4 money 40.6 time 2018-01-01 OK 127.0.0.1:6379> lpush user:2:order order:4 (integer) 4 127.0.0.1:6379> lrange user:2:order 0 3 1) \"order:4\" 2) \"order:3\" 3) \"order:2\" 4) \"order:1\" # 3.2 版本以后，内部编码为：quicklist 127.0.0.1:6379> object encoding user:2:order \"quicklist\" 无序集合 set 保存多元素，与列表不一样的是不允许有重复元素，且集合是无序，一个集合最多可存 2 的 32 次方减 1 个元素，除了支持增删改查，还支持集合交集、并集、差集； # 给用户添加标签 127.0.0.1:6379> sadd user:5:fav basball fball pq (integer) 3 127.0.0.1:6379> sadd user:6:fav basball fball (integer) 2 # 计算出共同感兴趣爱好 127.0.0.1:6379> sinter user:5:fav user:6:fav 1) \"fball\" 2) \"basball\" # 内部编码 # 当元素个数少(小于 512 个)且都为整数，redis 使用 intset 减少内存的使用 # 当超过 512 个或不为整数时，编码为 hashtable 127.0.0.1:6379> object encoding user:5:fav \"hashtable\" 有序集合 # 点赞数 127.0.0.1:6379> zadd user:20:20180106 3 mike (integer) 1 # 再获一赞 127.0.0.1:6379> zincrby user:20:20180106 1 mike \"4\" # 查看用户点赞数 127.0.0.1:6379> zscore user:20:20180106 mike \"4\" # 查看用户排名 127.0.0.1:6379> zrank user:20:20180106 mike (integer) 0 # 内部编码 # 当元素个数少（小于 128 个），元素值小于 64 字节时，使用 ziplist 编码，可有效减少内存的使用 # 大于 128 个元素或元素值大于 64 字节时为 skiplist 编码 127.0.0.1:6379> object encoding user:20:20180106 \"ziplist\" 集合类型对比 数据结构 是否允许元素重复 是否有序 有序实现方式 应用场景 列表 是 是 索引下标 时间轴，有序简单 集合 否 否 无 标签，社交 有序集合 否 是 分值 排行榜，点赞数 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/160_Redis管理.html":{"url":"redis/160_Redis管理.html","title":"Redis管理","keywords":"","body":"Redis管理 redis-cli 命令 # 返回 pong 表示 172.20.32.125:6379 能通，r 代表次数 $ redis-cli -r 3 -h 172.20.32.125 -p 6379 -a 123456 ping PONG PONG PONG # 每秒输出内存使用量，输出 10 次，i 代表执行的时间间隔，单位是秒 $ redis-cli -r 10 -h 172.20.32.125 -p 6379 -a 123456 -i 1 info | grep used_memory_human used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K used_memory_human:871.22K redis-server 命令 redis-benchmark 命令 基准性测试，测试redis的性能 # 模拟 100 个并发连接，100000 个请求 $ redis-benchmark -h 172.20.32.125 -p 6379 -a 123456 -c 100 -n 10000 Pipeline 事务 LUA 发布与订阅 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/170_Redis持久化.html":{"url":"redis/170_Redis持久化.html","title":"Redis持久化","keywords":"","body":"Redis持久化 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/175_Redis备份与恢复.html":{"url":"redis/175_Redis备份与恢复.html","title":"Redis持久化","keywords":"","body":"Redis持久化 Redis 数据备份与恢复 生产环境redis备份与恢复 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/180_Redis主从复制.html":{"url":"redis/180_Redis主从复制.html","title":"Redis主从复制","keywords":"","body":"Redis主从复制 https://github.com/DavidWittman/ansible-redis Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/190_Redis集群高可用.html":{"url":"redis/190_Redis集群高可用.html","title":"Redis集群高可用","keywords":"","body":"Redis集群高可用 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"redis/200_缓存应用场景.html":{"url":"redis/200_缓存应用场景.html","title":"缓存应用场景","keywords":"","body":"缓存应用场景 缓存雪崩 缓存雪崩我们可以简单的理解为：由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。 解决方案： 碰到这种情况，一般并发量不是特别多的时候，使用最多的解决方案是加锁排队 给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存 缓存穿透 缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。 解决方案： 采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。 如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。通过这个直接设置的默认值存放到缓存，这样第二次到缓存中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴！ 缓存预热 缓存预热就是系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！ 解决方案： 直接写个缓存刷新页面，上线时手工操作下； 数据量不大，可以在项目启动的时候自动进行加载； 定时刷新缓存； 缓存更新 除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰。 常见的策略有两种： 定时去清理过期的缓存； 当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。 缓存降级 当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。 降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。 在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案： 一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级； 警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警； 错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级； 严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"mongodb/MongoDB记录.html":{"url":"mongodb/MongoDB记录.html","title":"MongoDB记录","keywords":"","body":"MongoDB记录 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-11-26 15:28:34 "},"knowledge/110_经典词句.html":{"url":"knowledge/110_经典词句.html","title":"经典词句","keywords":"","body":"经典词句 根据《摩诃僧祗律》记载 一刹那者为一念，二十念为一瞬，二十瞬为一弹指，二十弹指为一罗预，二十罗预为一须臾，一日一夜有三十须臾。 那么，经过周密的计算，一瞬间为 0.36 秒,一刹那有 0.018 秒.一弹指长达 7.2 秒。 曾经有人这么告诉我:”在理想状态下，我们的页面跳转需要在瞬间解决，对于页内操作则需要在刹那间解决。另外，超过一弹指的耗时操作要有进度提示，并且可以随时中止或取消，这样才能给用户最好的体验。” Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "},"knowledge/120_励志思想.html":{"url":"knowledge/120_励志思想.html","title":"励志思想","keywords":"","body":"励志思想 分享决定技术高度 学习拉开技术差距 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-09-27 10:43:14 "}}